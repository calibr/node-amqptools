{"version":3,"file":"tasks.js","sourceRoot":"","sources":["tasks.ts"],"names":["Task","Task.constructor","Task.start"],"mappings":"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","sourcesContent":["/// <reference path=\"./typings/tsd.d.ts\" />\n\nconst EXCHANGE_PREFIX = \"nimbus:jobs:\";\nconst QUEUE_PREFIX = \"nimbus:jobs:queue:\";\nconst EXCHANGE_OPTIONS = { durable: true, autoDelete: false };\nconst JOB_QUEUE_OPTIONS = { durable: true, autoDelete: false };\n\nimport Promise = require(\"bluebird\")\nimport uuid = require(\"node-uuid\")\nimport _ = require(\"lodash\")\n\ninterface TaskParams {\n  title: string,\n  data: any\n}\n\nvar queues = {};\n\nclass Task {\n  uuid: string;\n  type: string;\n  params: TaskParams;\n  taskManager: any;\n\n  constructor (type: string, params: TaskParams) {\n    this.uuid = uuid.v4();\n    this.type = type;\n    this.params = params;\n  }\n  start(done?) {\n    var currentChannel;\n    var params =_.clone(this.params);\n    params['uuid'] = this.uuid;\n    var eventData = new Buffer(JSON.stringify(params));\n\n    this.taskManager.getChannel().then((channel) => {\n      currentChannel = channel;\n      return taskManager.assertExchange(currentChannel);\n    }).then(() => {\n      return taskManager.getQueue(this.type, true);\n    }).then(() => {\n      currentChannel.publish(this.taskManager.exchangeName, this.type, eventData);\n      if (done) done();\n    });\n\n    return this;\n  }\n}\n\nvar taskManager = {\n  service: \"unknown\",\n  exchangeName: \"\",\n  channelPromise: null,\n  _connect: (cb: (channel) => void) => {\n    throw new Error('Need to set tasks connect function');\n  },\n  getChannel: () => {\n    if (!taskManager.channelPromise) {\n      taskManager.channelPromise = new Promise((resolve, reject) => {\n        taskManager._connect((channel) => {\n          resolve(channel);\n        })\n      });\n    }\n    return taskManager.channelPromise;\n  },\n  getQueue: (taskType, bindQueueToExchange?) => {\n    if (queues[taskType]) return queues[taskType];\n    return taskManager.getChannel().then(() => {\n      var queueName = QUEUE_PREFIX + taskType;\n\n      queues[taskType] = taskManager.assertQueue(queueName);\n      if (bindQueueToExchange) taskManager.bindQueue(taskType);\n\n      return queues[taskType];\n    });\n  },\n  assertExchange: (channel) => {\n    var exchangeName = EXCHANGE_PREFIX + taskManager.service;\n    if (taskManager.exchangeName == exchangeName) return Promise.resolve(channel);\n    return new Promise((resolve, reject) => {\n      channel.assertExchange(exchangeName, 'direct', EXCHANGE_OPTIONS, (err) => {\n        taskManager.exchangeName = exchangeName;\n        if (err) return reject(err);\n        resolve(channel);\n      })\n    });\n  },\n  assertQueue: (queueName: string) => {\n    return taskManager.getChannel().then((channel) => {\n      return new Promise((resolve, reject) => {\n        channel.assertQueue(queueName, JOB_QUEUE_OPTIONS, (err, ok) => {\n          if (err) return reject(err);\n          resolve(ok);\n        })\n      })\n    })\n  },\n  bindQueue: (taskType: string) => {\n    return taskManager.getChannel().then((channel) => {\n      var queueName = QUEUE_PREFIX + taskType;\n      channel.bindQueue(queueName, taskManager.exchangeName, taskType);\n    });\n  },\n  Task: Task,\n  processTask: (taskType,  taskCallback) => {\n    var queueName = QUEUE_PREFIX + taskType,\n      currentChannel;\n\n    return taskManager.getChannel().then((channel) => {\n      currentChannel = channel;\n      return taskManager.getQueue(taskType);\n    }).then(() => {\n      currentChannel.prefetch(1);\n      currentChannel.consume(queueName, (msg) => {\n        var taskData = JSON.parse(msg.content);\n        taskCallback(taskData, () => {\n          currentChannel.ack(msg);\n        })\n      }, {noAck: false});\n    });\n  }\n};\n\nTask.prototype.taskManager = taskManager;\n\nexport = taskManager;"]}