/// <reference path="../typings/tsd.d.ts" />
var events = require("events");
var util = require("util");
var async = require("async");
var EXCHANGE_PREFIX = "_event:";
var QUEUE_PREFIX = "_queue:";
var EventEmitter = events.EventEmitter, addListenerMethods = ["addListener", "on", "once"], copyMethods = ["removeListener", "removeAllListeners", "setMaxListeners", "listeners"];
var channel = null;
function parseEvent(event) {
    var tmp = event.split(":");
    return {
        exchange: EXCHANGE_PREFIX + ":" + tmp[0],
        topic: tmp[1]
    };
}
function _getChannel(cb) {
    cb(null, channel);
}
var AMQPEventEmitter = (function () {
    function AMQPEventEmitter(runtime) {
        var _this = this;
        this.runtime = runtime || "";
        this.ee = new EventEmitter();
        this.eventsQueues = {};
        addListenerMethods.forEach(function (method) {
            _this[method] = function (event, cb, eventSetCb) {
                if (["newListener", "removeListener"].indexOf(event) !== -1) {
                    return _this.ee[method].call(_this.ee, event, cb);
                }
                _this.preListen(event, function (err) {
                    if (!err) {
                        _this.ee[method].call(_this.ee, event, cb);
                    }
                    if (eventSetCb) {
                        eventSetCb(err);
                    }
                });
            };
        });
        copyMethods.forEach(function (method) {
            _this[method] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                _this.ee[method].apply(_this.ee, args);
            };
        });
    }
    AMQPEventEmitter._connect = function (cb) {
        throw new Error('Need to set tasks connect function');
    };
    AMQPEventEmitter.prototype.preListen = function (event, cb) {
        var _this = this;
        AMQPEventEmitter._connect(function () {
            var eParsed = parseEvent(event);
            _this.assertExchange(eParsed.exchange, function (err) {
                if (err)
                    return cb(err);
                async.series([
                    function (next) {
                        if (_this.eventsQueues[event]) {
                            return next();
                        }
                        _this.createQueue(event, function (err) {
                            if (err)
                                return cb(err);
                            next();
                        });
                    },
                    function () { return cb(null); }
                ]);
            });
        });
    };
    ;
    AMQPEventEmitter.prototype.createQueue = function (event, cb) {
        var _this = this;
        var eParsed = parseEvent(event);
        _getChannel(function (err, chan) {
            if (err)
                return cb(err);
            var queueName = QUEUE_PREFIX + _this.runtime + ":" + eParsed.exchange;
            if (eParsed.topic) {
                queueName += ":" + eParsed.topic;
            }
            chan.assertQueue(queueName, {
                durable: false,
                autoDelete: true
            }, function (err, attrs) {
                if (err)
                    return cb(err);
                chan.bindQueue(queueName, eParsed.exchange, eParsed.topic, {}, function (err) {
                    if (err)
                        return cb(err);
                    _this.eventsQueues[event] = queueName;
                    chan.consume(queueName, function (msg) {
                        var content = JSON.parse(msg.content.toString()), args = util.isArray(content) ? [event].concat(content) : [event, content];
                        chan.ack(msg);
                        _this.ee.emit.apply(_this.ee, args);
                    });
                    cb(null);
                });
            });
        });
    };
    ;
    AMQPEventEmitter.prototype.assertExchange = function (name, cb) {
        _getChannel(function (err, chan) {
            if (err)
                return cb(err);
            chan.assertExchange(name, "direct", {
                durable: false,
                autoDelete: true
            }, function (err) { return cb(err); });
        });
    };
    ;
    AMQPEventEmitter.prototype.emit = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var eParsed = parseEvent(event);
        this.preListen(event, function (err) {
            if (!err) {
                _getChannel(function (err, chan) {
                    if (err)
                        return;
                    var buffer = new Buffer(JSON.stringify(args));
                    chan.publish(eParsed.exchange, eParsed.topic, buffer, {
                        contentType: "text/json"
                    });
                });
            }
        });
    };
    ;
    AMQPEventEmitter.setChannel = function (_channel) {
        channel = _channel;
    };
    ;
    return AMQPEventEmitter;
})();
module.exports = AMQPEventEmitter;
//# sourceMappingURL=data:application/json;base64,