/// <reference path="../typings/tsd.d.ts" />
var events = require("events");
var util = require("util");
var async = require("async");
var EXCHANGE_PREFIX = "_event:";
var QUEUE_PREFIX = "_queue:";
var EventEmitter = events.EventEmitter, addListenerMethods = ["addListener", "on", "once"], copyMethods = ["removeListener", "removeAllListeners", "setMaxListeners", "listeners"];
var channel = null;
function parseEvent(event) {
    var tmp = event.split(":");
    return {
        exchange: EXCHANGE_PREFIX + ":" + tmp[0],
        topic: tmp[1]
    };
}
function _getChannel(cb) {
    cb(null, channel);
}
var AMQPEventEmitter = (function () {
    function AMQPEventEmitter(runtime) {
        var _this = this;
        this.runtime = runtime || "";
        this.ee = new EventEmitter();
        this.eventsQueues = {};
        addListenerMethods.forEach(function (method) {
            _this[method] = function (event, cb, eventSetCb) {
                if (["newListener", "removeListener"].indexOf(event) !== -1) {
                    return _this.ee[method].call(_this.ee, event, cb);
                }
                _this.preListen(event, function (err) {
                    if (!err) {
                        _this.ee[method].call(_this.ee, event, cb);
                    }
                    if (eventSetCb) {
                        eventSetCb(err);
                    }
                });
            };
        });
        copyMethods.forEach(function (method) {
            _this[method] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                _this.ee[method].apply(_this.ee, args);
            };
        });
    }
    AMQPEventEmitter.prototype.preListen = function (event, cb) {
        var _this = this;
        AMQPEventEmitter.channelManager.connect(function () {
            var eParsed = parseEvent(event);
            _this.assertExchange(eParsed.exchange, function (err) {
                if (err)
                    return cb(err);
                async.series([
                    function (next) {
                        if (_this.eventsQueues[event]) {
                            return next();
                        }
                        _this.createQueue(event, function (err) {
                            if (err)
                                return cb(err);
                            next();
                        });
                    },
                    function () { return cb(null); }
                ]);
            });
        });
    };
    ;
    AMQPEventEmitter.prototype.createQueue = function (event, cb) {
        var _this = this;
        var eParsed = parseEvent(event);
        _getChannel(function (err, chan) {
            if (err)
                return cb(err);
            var queueName = QUEUE_PREFIX + _this.runtime + ":" + eParsed.exchange;
            if (eParsed.topic) {
                queueName += ":" + eParsed.topic;
            }
            chan.assertQueue(queueName, {
                durable: false,
                autoDelete: true
            }, function (err, attrs) {
                if (err)
                    return cb(err);
                chan.bindQueue(queueName, eParsed.exchange, eParsed.topic, {}, function (err) {
                    if (err)
                        return cb(err);
                    _this.eventsQueues[event] = queueName;
                    chan.consume(queueName, function (msg) {
                        var content = JSON.parse(msg.content.toString()), args = util.isArray(content) ? [event].concat(content) : [event, content];
                        chan.ack(msg);
                        _this.ee.emit.apply(_this.ee, args);
                    });
                    cb(null);
                });
            });
        });
    };
    ;
    AMQPEventEmitter.prototype.assertExchange = function (name, cb) {
        _getChannel(function (err, chan) {
            if (err)
                return cb(err);
            chan.assertExchange(name, "direct", {
                durable: false,
                autoDelete: true
            }, function (err) { return cb(err); });
        });
    };
    ;
    AMQPEventEmitter.prototype.emit = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var eParsed = parseEvent(event);
        this.preListen(event, function (err) {
            if (!err) {
                _getChannel(function (err, chan) {
                    if (err)
                        return;
                    var buffer = new Buffer(JSON.stringify(args));
                    chan.publish(eParsed.exchange, eParsed.topic, buffer, {
                        contentType: "text/json"
                    });
                });
            }
        });
    };
    ;
    AMQPEventEmitter.setChannel = function (_channel) {
        channel = _channel;
    };
    ;
    return AMQPEventEmitter;
})();
module.exports = AMQPEventEmitter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRFbWl0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2V2ZW50RW1pdHRlci50cyJdLCJuYW1lcyI6WyJwYXJzZUV2ZW50IiwiX2dldENoYW5uZWwiLCJBTVFQRXZlbnRFbWl0dGVyIiwiQU1RUEV2ZW50RW1pdHRlci5jb25zdHJ1Y3RvciIsIkFNUVBFdmVudEVtaXR0ZXIucHJlTGlzdGVuIiwiQU1RUEV2ZW50RW1pdHRlci5jcmVhdGVRdWV1ZSIsIkFNUVBFdmVudEVtaXR0ZXIuYXNzZXJ0RXhjaGFuZ2UiLCJBTVFQRXZlbnRFbWl0dGVyLmVtaXQiLCJBTVFQRXZlbnRFbWl0dGVyLnNldENoYW5uZWwiXSwibWFwcGluZ3MiOiJBQUFBLDRDQUE0QztBQUU1QyxJQUFPLE1BQU0sV0FBVyxRQUFRLENBQUMsQ0FBQTtBQUNqQyxJQUFPLElBQUksV0FBVyxNQUFNLENBQUMsQ0FBQTtBQUM3QixJQUFPLEtBQUssV0FBVyxPQUFPLENBQUMsQ0FBQTtBQUUvQixJQUFNLGVBQWUsR0FBRyxTQUFTLENBQUM7QUFDbEMsSUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDO0FBRS9CLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQ3BDLGtCQUFrQixHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsRUFDbEQsV0FBVyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsb0JBQW9CLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFFekYsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBRW5CLG9CQUFvQixLQUFLO0lBQ3ZCQSxJQUFJQSxHQUFHQSxHQUFHQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUMzQkEsTUFBTUEsQ0FBQ0E7UUFDTEEsUUFBUUEsRUFBRUEsZUFBZUEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDeENBLEtBQUtBLEVBQUVB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