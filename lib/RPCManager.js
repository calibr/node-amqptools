var async = require("async");
var randomString = require("just.randomstring");
var ChannelManager_1 = require('./ChannelManager');
var QUEUE_PREFIX = "_queue_rpc:";
var CALL_TIMEOUT = 3600 * 1000;
var returnCbs = {}, replyQueue = "", DEBUG = false;
function dbg() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
    }
    if (DEBUG) {
        console.log.apply(console, args);
    }
}
setInterval(function () {
    var removeKeys = [], now = new Date().getTime(), k, timeCreated, data;
    for (k in returnCbs) {
        timeCreated = returnCbs[k].date.getTime();
        if (now - timeCreated >= CALL_TIMEOUT) {
            removeKeys.push(k);
        }
    }
    removeKeys.forEach(function (k) {
        data = returnCbs[k];
        delete returnCbs[k];
    });
}, 3600 * 1000);
function _parseAction(event) {
    return {
        queue: QUEUE_PREFIX + event,
    };
}
function _errorPrepare(err) {
    if (!err) {
        return null;
    }
    return {
        code: err.code ? err.code : -1,
        msg: err.message,
        data: err.data,
        errtype: err.errtype
    };
}
var RPC = (function () {
    function RPC() {
        this.processors = {};
    }
    RPC.prototype.createQueue = function (action, cb) {
        var _this = this;
        return ChannelManager_1.channelManager.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                var actionParsed = _parseAction(action);
                channel.assertQueue(actionParsed.queue, {}, function (err, attrs) {
                    if (err)
                        return reject(err);
                    channel.consume(actionParsed.queue, function (msg) {
                        var content = JSON.parse(msg.content.toString());
                        try {
                            dbg("Incoming RPC request", action);
                            _this.processors[action].listener(content, function (err, body) {
                                var response = {
                                    error: _errorPrepare(err),
                                    body: typeof body !== "undefined" ? body : null
                                };
                                channel.sendToQueue(msg.properties.replyTo, new Buffer(JSON.stringify(response)), {
                                    correlationId: msg.properties.correlationId
                                });
                                dbg("Incoming RPC request", action, " processed! reply to", msg.properties.replyTo);
                            });
                        }
                        catch (ex) {
                            console.error("ERROR IN rpc processor\n", ex.message, ex.stack);
                        }
                        channel.ack(msg);
                    }, {}, function (err, res) {
                        if (err)
                            return reject(err);
                        resolve(res.consumerTag);
                    });
                });
            });
        }).nodeify(cb);
    };
    ;
    RPC.prototype.register = function (action, cb, registerCb) {
        var _this = this;
        registerCb = registerCb || (function () { return null; });
        if (this.processors[action]) {
            throw new Error("Can't register same action processor twice");
        }
        var consumerTag;
        async.series([
            function (next) {
                ChannelManager_1.channelManager.connect(function () {
                    next();
                });
            },
            function (next) {
                _this.createQueue(action, function (err, tag) {
                    if (!err) {
                        consumerTag = tag;
                    }
                    next(err);
                });
            }
        ], function (err) {
            if (!err) {
                _this.processors[action] = {
                    listener: cb,
                    consumerTag: consumerTag
                };
            }
            registerCb(err);
        });
        return true;
    };
    ;
    RPC.prototype.unregister = function (action, cb) {
        var _this = this;
        return ChannelManager_1.channelManager.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                if (!_this.processors[action]) {
                    process.nextTick(function () { return resolve(null); });
                    return;
                }
                channel.cancel(_this.processors[action].consumerTag, function (err) {
                    if (err)
                        return reject(err);
                    delete _this.processors[action];
                    resolve(null);
                });
            });
        }).nodeify(cb);
    };
    ;
    RPC.prototype.call = function (action, params, cb) {
        return ChannelManager_1.channelManager.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                if (typeof params === "function") {
                    cb = params;
                    params = {};
                }
                var actionParsed = _parseAction(action);
                async.series([
                    function (next) {
                        ChannelManager_1.channelManager.connect(function () {
                            next();
                        });
                    },
                    function (next) {
                        if (replyQueue) {
                            return next();
                        }
                        channel.assertQueue("", {
                            durable: false,
                            autoDelete: true
                        }, function (err, attrs) {
                            if (err)
                                return reject(err);
                            replyQueue = attrs.queue;
                            channel.consume(replyQueue, function (_msg) {
                                var msg = JSON.parse(_msg.content.toString()), correlationId = _msg.properties.correlationId;
                                if (returnCbs[correlationId]) {
                                    dbg("RPC Response", returnCbs[correlationId].action);
                                    var resError = null;
                                    if (msg.error) {
                                        resError = new Error(msg.error.msg);
                                        resError.code = msg.error.code;
                                        resError.errtype = msg.error.errtype;
                                        resError.data = msg.error.data;
                                    }
                                    var returnCb = returnCbs[correlationId].cb;
                                    delete returnCbs[correlationId];
                                    returnCb(resError, msg.body);
                                }
                                else {
                                    dbg("Obtained reply but unrecognized by correlationId:", correlationId);
                                }
                                channel.ack(_msg);
                            });
                            next();
                        });
                    },
                    function () {
                        var correlationId = randomString(48);
                        dbg("RPC Call", action, "wait reply to", replyQueue);
                        returnCbs[correlationId] = {
                            date: new Date(),
                            cb: cb,
                            action: action,
                            params: params
                        };
                        channel.sendToQueue(actionParsed.queue, new Buffer(JSON.stringify(params)), {
                            correlationId: correlationId,
                            replyTo: replyQueue
                        });
                    }
                ]);
            });
        }).nodeify(cb);
    };
    RPC.purgeActionQueue = function (action, cb) {
        return ChannelManager_1.channelManager.getChannel().then(function (channel) {
            var actionParsed = _parseAction(action);
            channel.purgeQueue(actionParsed.queue, cb);
        });
    };
    ;
    return RPC;
})();
module.exports = RPC;
//# sourceMappingURL=data:application/json;base64,