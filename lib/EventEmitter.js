var events = require("events");
var util = require("util");
var Event_1 = require("./Event");
var EventListener_1 = require("./EventListener");
var EventEmitter = events.EventEmitter, addListenerMethods = ["addListener", "on", "once"], copyMethods = ["removeListener", "removeAllListeners", "setMaxListeners", "listeners"];
function parseEvent(event) {
    var tmp = event.split(":");
    return {
        exchange: tmp[0],
        topic: tmp[1]
    };
}
var AMQPEventEmitter = (function () {
    function AMQPEventEmitter(runtime) {
        var _this = this;
        this.runtime = runtime || "";
        this.ee = new EventEmitter();
        this.eventsListeners = {};
        addListenerMethods.forEach(function (method) {
            _this[method] = function (event, cb, eventSetCb) {
                if (["newListener", "removeListener"].indexOf(event) !== -1) {
                    return _this.ee[method].call(_this.ee, event, cb);
                }
                _this.preListen(event, function (err) {
                    if (!err) {
                        _this.ee[method].call(_this.ee, event, cb);
                    }
                    if (eventSetCb) {
                        eventSetCb(err);
                    }
                });
            };
        });
        copyMethods.forEach(function (method) {
            _this[method] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                _this.ee[method].apply(_this.ee, args);
            };
        });
    }
    AMQPEventEmitter.prototype.preListen = function (event, cb) {
        var _this = this;
        var eParsed = parseEvent(event);
        if (this.eventsListeners[event]) {
            return cb(null);
        }
        var eventListener = new EventListener_1.EventListener({
            exchange: eParsed.exchange,
            topic: eParsed.topic,
            runtime: this.runtime
        });
        this.eventsListeners[event] = eventListener;
        return eventListener.listen(function (message) {
            var content = message.content, args = util.isArray(content) ? [event].concat(content) : [event, content];
            _this.ee.emit.apply(_this.ee, args);
        }).nodeify(cb);
    };
    AMQPEventEmitter.prototype.emit = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var eParsed = parseEvent(event);
        var amqpEvent = new Event_1.Event({
            exchange: eParsed.exchange,
            topic: eParsed.topic
        });
        amqpEvent.send(args);
    };
    ;
    AMQPEventEmitter.prototype.addListener = function (event, listener, cb) { };
    ;
    AMQPEventEmitter.prototype.on = function (event, listener, cb) { };
    ;
    AMQPEventEmitter.prototype.once = function (event, listener, cb) { };
    ;
    AMQPEventEmitter.prototype.removeListener = function (event, listener) { };
    ;
    AMQPEventEmitter.prototype.removeAllListeners = function (event) { };
    ;
    AMQPEventEmitter.prototype.setMaxListeners = function (n) { };
    ;
    AMQPEventEmitter.prototype.listeners = function (event) { };
    ;
    return AMQPEventEmitter;
})();
module.exports = AMQPEventEmitter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRFbWl0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0V2ZW50RW1pdHRlci50cyJdLCJuYW1lcyI6WyJwYXJzZUV2ZW50IiwiQU1RUEV2ZW50RW1pdHRlciIsIkFNUVBFdmVudEVtaXR0ZXIuY29uc3RydWN0b3IiLCJBTVFQRXZlbnRFbWl0dGVyLnByZUxpc3RlbiIsIkFNUVBFdmVudEVtaXR0ZXIuZW1pdCIsIkFNUVBFdmVudEVtaXR0ZXIuYWRkTGlzdGVuZXIiLCJBTVFQRXZlbnRFbWl0dGVyLm9uIiwiQU1RUEV2ZW50RW1pdHRlci5vbmNlIiwiQU1RUEV2ZW50RW1pdHRlci5yZW1vdmVMaXN0ZW5lciIsIkFNUVBFdmVudEVtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzIiwiQU1RUEV2ZW50RW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMiLCJBTVFQRXZlbnRFbWl0dGVyLmxpc3RlbmVycyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBWSxNQUFNLFdBQU0sUUFDeEIsQ0FBQyxDQUQrQjtBQUNoQyxJQUFZLElBQUksV0FBTSxNQUN0QixDQUFDLENBRDJCO0FBSTVCLHNCQUFzQixTQUN0QixDQUFDLENBRDhCO0FBQy9CLDhCQUE4QixpQkFFOUIsQ0FBQyxDQUY4QztBQUUvQyxJQUFJLFlBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxFQUNwQyxrQkFBa0IsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLEVBQ2xELFdBQVcsR0FBRyxDQUFDLGdCQUFnQixFQUFFLG9CQUFvQixFQUFFLGlCQUFpQixFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBRXpGLG9CQUFvQixLQUFLO0lBQ3ZCQSxJQUFJQSxHQUFHQSxHQUFHQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUMzQkEsTUFBTUEsQ0FBQ0E7UUFDTEEsUUFBUUEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDaEJBLEtBQUtBLEVB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