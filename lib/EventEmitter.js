/// <reference path="../typings/tsd.d.ts" />
var events = require("events");
var util = require("util");
var Event_1 = require("./Event");
var EventListener_1 = require("./EventListener");
var EventEmitter = events.EventEmitter, addListenerMethods = ["addListener", "on", "once"], copyMethods = ["removeListener", "removeAllListeners", "setMaxListeners", "listeners"];
function parseEvent(event) {
    var tmp = event.split(":");
    return {
        exchange: tmp[0],
        topic: tmp[1]
    };
}
var AMQPEventEmitter = (function () {
    function AMQPEventEmitter(runtime) {
        var _this = this;
        this.runtime = runtime || "";
        this.ee = new EventEmitter();
        this.eventsListeners = {};
        addListenerMethods.forEach(function (method) {
            _this[method] = function (event, cb, eventSetCb) {
                if (["newListener", "removeListener"].indexOf(event) !== -1) {
                    return _this.ee[method].call(_this.ee, event, cb);
                }
                _this.preListen(event, function (err) {
                    if (!err) {
                        _this.ee[method].call(_this.ee, event, cb);
                    }
                    if (eventSetCb) {
                        eventSetCb(err);
                    }
                });
            };
        });
        copyMethods.forEach(function (method) {
            _this[method] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                _this.ee[method].apply(_this.ee, args);
            };
        });
    }
    AMQPEventEmitter.getChannel = function () {
        return AMQPEventEmitter.channelManager.getChannel();
    };
    AMQPEventEmitter.prototype.preListen = function (event, cb) {
        var _this = this;
        var eParsed = parseEvent(event);
        if (this.eventsListeners[event]) {
            return cb(null);
        }
        var eventListener = new EventListener_1.EventListener({
            exchange: eParsed.exchange,
            topic: eParsed.topic,
            channelManager: AMQPEventEmitter.channelManager,
            runtime: this.runtime
        });
        this.eventsListeners[event] = eventListener;
        return eventListener.listen(function (message) {
            var content = message.content, args = util.isArray(content) ? [event].concat(content) : [event, content];
            _this.ee.emit.apply(_this.ee, args);
        }).nodeify(cb);
    };
    AMQPEventEmitter.prototype.emit = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var eParsed = parseEvent(event);
        var event = new Event_1.Event({
            channelManager: AMQPEventEmitter.channelManager,
            exchange: eParsed.exchange,
            topic: eParsed.topic
        });
        event.send(args);
    };
    ;
    return AMQPEventEmitter;
})();
module.exports = AMQPEventEmitter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRFbWl0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0V2ZW50RW1pdHRlci50cyJdLCJuYW1lcyI6WyJwYXJzZUV2ZW50IiwiQU1RUEV2ZW50RW1pdHRlciIsIkFNUVBFdmVudEVtaXR0ZXIuY29uc3RydWN0b3IiLCJBTVFQRXZlbnRFbWl0dGVyLmdldENoYW5uZWwiLCJBTVFQRXZlbnRFbWl0dGVyLnByZUxpc3RlbiIsIkFNUVBFdmVudEVtaXR0ZXIuZW1pdCJdLCJtYXBwaW5ncyI6IkFBQUEsNENBQTRDO0FBRTVDLElBQU8sTUFBTSxXQUFXLFFBQVEsQ0FBQyxDQUFBO0FBQ2pDLElBQU8sSUFBSSxXQUFXLE1BQU0sQ0FBQyxDQUFBO0FBSTdCLHNCQUFzQixTQUFTLENBQUMsQ0FBQTtBQUNoQyw4QkFBOEIsaUJBQWlCLENBQUMsQ0FBQTtBQUdoRCxJQUFJLFlBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxFQUNwQyxrQkFBa0IsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLEVBQ2xELFdBQVcsR0FBRyxDQUFDLGdCQUFnQixFQUFFLG9CQUFvQixFQUFFLGlCQUFpQixFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBRXpGLG9CQUFvQixLQUFLO0lBQ3ZCQSxJQUFJQSxHQUFHQSxHQUFHQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUMzQkEsTUFBTUEsQ0FBQ0E7UUFDTEEsUUFBUUEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDaEJBLEtBQUtBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO0tBQ2RBLENBQUNBO0FBQ0pBLENBQUNBO0FBTUQ7SUFNRUMsMEJBQVlBLE9BQU9BO1FBTnJCQyxpQkF3RUNBO1FBakVHQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxPQUFPQSxJQUFJQSxFQUFFQSxDQUFDQTtRQUM3QkEsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0Es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