var events = require("events");
var util = require("util");
var Event_1 = require("./Event");
var EventListener_1 = require("./EventListener");
var _ = require("lodash");
var EventEmitter = events.EventEmitter, addListenerMethods = ["addListener", "on", "once"], copyMethods = ["removeListener", "removeAllListeners", "setMaxListeners", "listeners"], defaultOptions = {
    exchange: 'nimbus:events',
    queuePrefix: 'nimbus:listener:'
}, defaultQueueOptions = {
    durable: false, autoDelete: true, exclusive: true
}, defaultExchangeOptions = {
    durable: true, autoDelete: false
};
function parseEvent(event) {
    var tmp = event.split(":");
    return {
        exchange: tmp[0],
        topic: tmp[1]
    };
}
var AMQPEventEmitter = (function () {
    function AMQPEventEmitter(runtime, options) {
        var _this = this;
        this.runtime = runtime || "";
        this.ee = new EventEmitter();
        this.eventsListeners = {};
        this.options = options || {};
        if (!this.options.queueOptions) {
            this.options.queueOptions = {};
        }
        if (!this.options.exchangeOptions) {
            this.options.exchangeOptions = {};
        }
        _.defaults(this.options, defaultOptions);
        _.defaults(this.options.queueOptions, defaultQueueOptions);
        _.defaults(this.options.exchangeOptions, defaultExchangeOptions);
        addListenerMethods.forEach(function (method) {
            _this[method] = function (event, cb, eventSetCb) {
                if (["newListener", "removeListener"].indexOf(event) !== -1) {
                    return _this.ee[method].call(_this.ee, event, cb);
                }
                _this.preListen(event, function (err) {
                    if (!err) {
                        _this.ee[method].call(_this.ee, event, cb);
                    }
                    if (eventSetCb) {
                        eventSetCb(err);
                    }
                });
            };
        });
        copyMethods.forEach(function (method) {
            _this[method] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                _this.ee[method].apply(_this.ee, args);
            };
        });
    }
    AMQPEventEmitter.prototype.preListen = function (event, cb) {
        var _this = this;
        var eParsed = parseEvent(event);
        if (this.eventsListeners[event]) {
            return cb(null);
        }
        var eventListener = new EventListener_1.EventListener({
            exchange: this.options.exchange,
            topic: event,
            runtime: this.runtime,
            queuePrefix: this.options.queuePrefix,
            queueOptions: this.options.queueOptions,
            exchangeOptions: this.options.exchangeOptions,
        });
        this.eventsListeners[event] = eventListener;
        return eventListener.listen(function (message) {
            var content = message.content, args = util.isArray(content) ? [event].concat(content) : [event, content];
            _this.ee.emit.apply(_this.ee, args);
        }).nodeify(cb);
    };
    AMQPEventEmitter.prototype.emit = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var eParsed = parseEvent(event);
        var amqpEvent = new Event_1.Event({
            exchange: this.options.exchange,
            topic: event,
            exchangeOptions: this.options.exchangeOptions
        });
        amqpEvent.send(args);
    };
    ;
    AMQPEventEmitter.prototype.addListener = function (event, listener) { };
    ;
    AMQPEventEmitter.prototype.on = function (event, listener) { };
    ;
    AMQPEventEmitter.prototype.once = function (event, listener) { };
    ;
    AMQPEventEmitter.prototype.removeListener = function (event, listener) { };
    ;
    AMQPEventEmitter.prototype.removeAllListeners = function (event) { };
    ;
    AMQPEventEmitter.prototype.setMaxListeners = function (n) { };
    ;
    AMQPEventEmitter.prototype.listeners = function (event) { };
    ;
    return AMQPEventEmitter;
})();
module.exports = AMQPEventEmitter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRFbWl0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0V2ZW50RW1pdHRlci50cyJdLCJuYW1lcyI6WyJwYXJzZUV2ZW50IiwiQU1RUEV2ZW50RW1pdHRlciIsIkFNUVBFdmVudEVtaXR0ZXIuY29uc3RydWN0b3IiLCJBTVFQRXZlbnRFbWl0dGVyLnByZUxpc3RlbiIsIkFNUVBFdmVudEVtaXR0ZXIuZW1pdCIsIkFNUVBFdmVudEVtaXR0ZXIuYWRkTGlzdGVuZXIiLCJBTVFQRXZlbnRFbWl0dGVyLm9uIiwiQU1RUEV2ZW50RW1pdHRlci5vbmNlIiwiQU1RUEV2ZW50RW1pdHRlci5yZW1vdmVMaXN0ZW5lciIsIkFNUVBFdmVudEVtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzIiwiQU1RUEV2ZW50RW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMiLCJBTVFQRXZlbnRFbWl0dGVyLmxpc3RlbmVycyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBWSxNQUFNLFdBQU0sUUFDeEIsQ0FBQyxDQUQrQjtBQUNoQyxJQUFZLElBQUksV0FBTSxNQUN0QixDQUFDLENBRDJCO0FBSTVCLHNCQUFzQixTQUN0QixDQUFDLENBRDhCO0FBQy9CLDhCQUE4QixpQkFDOUIsQ0FBQyxDQUQ4QztBQUMvQyxJQUFZLENBQUMsV0FBTSxRQUVuQixDQUFDLENBRjBCO0FBRTNCLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQ3BDLGtCQUFrQixHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsRUFDbEQsV0FBVyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsb0JBQW9CLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLEVBQ3RGLGNBQWMsR0FBRztJQUNmLFFBQVEsRUFBRSxlQUFlO0lBQ3pCLFdBQVcsRUFBRSxrQkFBa0I7Q0FDaEMsRUFDRCxtQkFBbUIsR0FBRztJQUNwQixPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUs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