/// <reference path="../typings/tsd.d.ts" />
var events = require("events");
var util = require("util");
var async = require("async");
var Promise = require('bluebird');
var EXCHANGE_PREFIX = "_event:";
var QUEUE_PREFIX = "_queue:";
var EventEmitter = events.EventEmitter, addListenerMethods = ["addListener", "on", "once"], copyMethods = ["removeListener", "removeAllListeners", "setMaxListeners", "listeners"];
function parseEvent(event) {
    var tmp = event.split(":");
    return {
        exchange: EXCHANGE_PREFIX + ":" + tmp[0],
        topic: tmp[1]
    };
}
var AMQPEventEmitter = (function () {
    function AMQPEventEmitter(runtime) {
        var _this = this;
        this.runtime = runtime || "";
        this.ee = new EventEmitter();
        this.eventsQueues = {};
        addListenerMethods.forEach(function (method) {
            _this[method] = function (event, cb, eventSetCb) {
                if (["newListener", "removeListener"].indexOf(event) !== -1) {
                    return _this.ee[method].call(_this.ee, event, cb);
                }
                _this.preListen(event, function (err) {
                    if (!err) {
                        _this.ee[method].call(_this.ee, event, cb);
                    }
                    if (eventSetCb) {
                        eventSetCb(err);
                    }
                });
            };
        });
        copyMethods.forEach(function (method) {
            _this[method] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                _this.ee[method].apply(_this.ee, args);
            };
        });
    }
    AMQPEventEmitter.getChannel = function () {
        return AMQPEventEmitter.channelManager.getChannel();
    };
    AMQPEventEmitter.prototype.preListen = function (event, cb) {
        var _this = this;
        AMQPEventEmitter.channelManager.connect(function () {
            var eParsed = parseEvent(event);
            _this.assertExchange(eParsed.exchange, function (err) {
                if (err)
                    return cb(err);
                async.series([
                    function (next) {
                        if (_this.eventsQueues[event]) {
                            return next();
                        }
                        _this.createQueue(event, function (err) {
                            if (err)
                                return cb(err);
                            next();
                        });
                    },
                    function () { return cb(null); }
                ]);
            });
        });
    };
    ;
    AMQPEventEmitter.prototype.createQueue = function (event, cb) {
        var _this = this;
        var eParsed = parseEvent(event);
        return AMQPEventEmitter.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                var queueName = QUEUE_PREFIX + _this.runtime + ":" + eParsed.exchange;
                if (eParsed.topic) {
                    queueName += ":" + eParsed.topic;
                }
                channel.assertQueue(queueName, {
                    durable: false,
                    autoDelete: true
                }, function (err) {
                    if (err)
                        return reject(err);
                    channel.bindQueue(queueName, eParsed.exchange, eParsed.topic, {}, function (err) {
                        if (err)
                            return reject(err);
                        _this.eventsQueues[event] = queueName;
                        channel.consume(queueName, function (msg) {
                            var content = JSON.parse(msg.content.toString()), args = util.isArray(content) ? [event].concat(content) : [event, content];
                            channel.ack(msg);
                            _this.ee.emit.apply(_this.ee, args);
                        });
                        resolve(null);
                    });
                });
            });
        }).nodeify(cb);
    };
    ;
    AMQPEventEmitter.prototype.assertExchange = function (name, cb) {
        return AMQPEventEmitter.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertExchange(name, "direct", {
                    durable: false,
                    autoDelete: true
                }, function (err) { return err ? reject(err) : resolve(null); });
            });
        }).nodeify(cb);
    };
    ;
    AMQPEventEmitter.prototype.emit = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var eParsed = parseEvent(event);
        this.preListen(event, function (err) {
            if (!err) {
                return AMQPEventEmitter.getChannel().then(function (channel) {
                    var buffer = new Buffer(JSON.stringify(args));
                    channel.publish(eParsed.exchange, eParsed.topic, buffer, {
                        contentType: "text/json"
                    });
                });
            }
        });
    };
    ;
    return AMQPEventEmitter;
})();
module.exports = AMQPEventEmitter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRFbWl0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0V2ZW50RW1pdHRlci50cyJdLCJuYW1lcyI6WyJwYXJzZUV2ZW50IiwiQU1RUEV2ZW50RW1pdHRlciIsIkFNUVBFdmVudEVtaXR0ZXIuY29uc3RydWN0b3IiLCJBTVFQRXZlbnRFbWl0dGVyLmdldENoYW5uZWwiLCJBTVFQRXZlbnRFbWl0dGVyLnByZUxpc3RlbiIsIkFNUVBFdmVudEVtaXR0ZXIuY3JlYXRlUXVldWUiLCJBTVFQRXZlbnRFbWl0dGVyLmFzc2VydEV4Y2hhbmdlIiwiQU1RUEV2ZW50RW1pdHRlci5lbWl0Il0sIm1hcHBpbmdzIjoiQUFBQSw0Q0FBNEM7QUFFNUMsSUFBTyxNQUFNLFdBQVcsUUFBUSxDQUFDLENBQUE7QUFDakMsSUFBTyxJQUFJLFdBQVcsTUFBTSxDQUFDLENBQUE7QUFDN0IsSUFBTyxLQUFLLFdBQVcsT0FBTyxDQUFDLENBQUE7QUFFL0IsSUFBTyxPQUFPLFdBQVcsVUFBVSxDQUFDLENBQUE7QUFFcEMsSUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDO0FBQ2xDLElBQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQztBQUUvQixJQUFJLFlBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxFQUNwQyxrQkFBa0IsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLEVBQ2xELFdBQVcsR0FBRyxDQUFDLGdCQUFnQixFQUFFLG9CQUFvQixFQUFFLGlCQUFpQixFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBRXpGLG9CQUFvQixLQUFLO0lBQ3ZCQSxJQUFJQSxHQUFHQSxHQUFHQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUMzQkEsTUFBTUEsQ0FBQ0E7UUFDTEEsUUFBUUEsRUFBRUEsZUFBZUEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDeENBLEtBQUtBLEVBQUVBLEdBQUdBLENB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QSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQTtnQkFDbkNBLENBQUNBO2dCQUNEQSxPQUFPQSxDQUFDQSxXQUFXQSxDQUFDQSxTQUFTQSxFQUFFQTtvQkFDN0JBLE9BQU9BLEVBQUVBLEtBQUtBO29CQUNkQSxVQUFVQSxFQUFFQSxJQUFJQTtpQkFDakJBLEVBQUVBLFVBQUNBLEdBQUdBO29CQUNMQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQTt3QkFBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7b0JBRTVCQSxPQUFPQSxDQUFDQSxTQUFTQSxDQUFDQSxTQUFTQSxFQUFFQSxPQUFPQSxDQUFDQSxRQUFRQSxFQUFFQSxPQUFPQSxDQUFDQSxLQUFLQSxFQUFFQSxFQUFFQSxFQUFFQSxVQUFDQSxHQUFHQTt3QkFDcEVBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBOzRCQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTt3QkFFNUJBLEtBQUlBLENBQUNBLFlBQVlBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBO3dCQUNyQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsU0FBU0EsRUFBRUEsVUFBQ0EsR0FBR0E7NEJBQzdCQSxJQUFJQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxPQUFPQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQSxFQUM5Q0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7NEJBRTVFQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTs0QkFDakJBLEtBQUlBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEtBQUlBLENBQUNBLEVBQUVBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO3dCQUNwQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQ0hBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO29CQUNoQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ0xBLENBQUNBLENBQUNBLENBQUNBO1lBQ0xBLENBQUNBLENBQUNBLENBQUFBO1FBQ0pBLENBQUNBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO0lBQ2pCQSxDQUFDQTs7SUFFT0oseUNBQWNBLEdBQXRCQSxVQUF1QkEsSUFBSUEsRUFBRUEsRUFBR0E7UUFDOUJLLE1BQU1BLENBQUNBLGdCQUFnQkEsQ0FBQ0EsVUFBVUEsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBQ0EsT0FBT0E7WUFDaERBLE1BQU1BLENBQUNBLElBQUlBLE9BQU9BLENBQUNBLFVBQUNBLE9BQU9BLEVBQUVBLE1BQU1BO2dCQUNqQ0EsT0FBT0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsSUFBSUEsRUFBRUEsUUFBUUEsRUFBRUE7b0JBQ3JDQSxPQUFPQSxFQUFFQSxLQUFLQTtvQkFDZEEsVUFBVUEsRUFBRUEsSUFBSUE7aUJBQ2pCQSxFQUFFQSxVQUFDQSxHQUFHQSxJQUFLQSxPQUFBQSxHQUFHQSxHQUFHQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFqQ0EsQ0FBaUNBLENBQUNBLENBQUNBO1lBQ2pEQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNMQSxDQUFDQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtJQUNqQkEsQ0FBQ0E7O0lBRURMLCtCQUFJQSxHQUFKQSxVQUFLQSxLQUFLQTtRQUFFTSxjQUFhQTthQUFiQSxXQUFhQSxDQUFiQSxzQkFBYUEsQ0FBYkEsSUFBYUE7WUFBYkEsNkJBQWFBOztRQUN2QkEsSUFBSUEsT0FBT0EsR0FBR0EsVUFBVUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDaENBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLEtBQUtBLEVBQUVBLFVBQUNBLEdBQUdBO1lBQ3hCQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDVEEsTUFBTUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxVQUFVQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFDQSxPQUFPQTtvQkFDaERBLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO29CQUU5Q0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsUUFBUUEsRUFBRUEsT0FBT0EsQ0FBQ0EsS0FBS0EsRUFBRUEsTUFBTUEsRUFBRUE7d0JBQ3ZEQSxXQUFXQSxFQUFFQSxXQUFXQTtxQkFDekJBLENBQUNBLENBQUNBO2dCQUNMQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNMQSxDQUFDQTtRQUNIQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNMQSxDQUFDQTs7SUFDSE4sdUJBQUNBO0FBQURBLENBQUNBLEFBckhELElBcUhDO0FBRUQsaUJBQVMsZ0JBQWdCLENBQUMifQ==