var ChannelManager_1 = require('./ChannelManager');
var uuid = require("node-uuid");
var _ = require("lodash");
var EXCHANGE_PREFIX = "nimbus:jobs:";
var EXCHANGE_OPTIONS = { durable: true, autoDelete: false };
var JOB_QUEUE_PREFIX = "nimbus:jobs:queue:";
var JOB_QUEUE_OPTIONS = { durable: true, autoDelete: false };
var Task = (function () {
    function Task(type, params) {
        this.uuid = uuid.v4();
        this.type = type;
        this.params = params;
    }
    Object.defineProperty(Task.prototype, "exchangeName", {
        get: function () {
            return EXCHANGE_PREFIX + Task.taskManager.service;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "queueName", {
        get: function () {
            return JOB_QUEUE_PREFIX + this.type;
        },
        enumerable: true,
        configurable: true
    });
    Task.prototype.start = function (done) {
        var _this = this;
        if (!this.params)
            return;
        ChannelManager_1.channelManager.getChannel()
            .then(function () { return _this.assertExchange(); })
            .then(function () { return _this.assertQueue(); })
            .then(function () { return _this.bindQueue(); })
            .then(function (channel) {
            var params = _.clone(_this.params);
            params['uuid'] = _this.uuid;
            var eventData = new Buffer(JSON.stringify(params));
            channel.publish(_this.exchangeName, _this.type, eventData);
            if (done)
                done();
        });
        return this;
    };
    Task.prototype.assertExchange = function () {
        var _this = this;
        return ChannelManager_1.channelManager.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertExchange(_this.exchangeName, 'direct', EXCHANGE_OPTIONS, function (err) {
                    if (err)
                        return reject(err);
                    resolve(channel);
                });
            });
        });
    };
    Task.prototype.assertQueue = function () {
        var _this = this;
        return ChannelManager_1.channelManager.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertQueue(_this.queueName, JOB_QUEUE_OPTIONS, function (err) {
                    if (err)
                        return reject(err);
                    resolve(channel);
                });
            });
        });
    };
    Task.prototype.bindQueue = function () {
        var _this = this;
        return ChannelManager_1.channelManager.getChannel().then(function (channel) {
            channel.bindQueue(_this.queueName, _this.exchangeName, _this.type);
            return channel;
        });
    };
    Task.prototype.purgeQueue = function () {
        var _this = this;
        return ChannelManager_1.channelManager.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.checkQueue(_this.queueName, function (err, ok) {
                    if (err)
                        return resolve(null);
                    if (ok) {
                        return channel.purgeQueue(_this.queueName, function (err, reply) {
                            if (err)
                                return reject(err);
                            resolve(reply);
                        });
                    }
                    resolve(null);
                });
            });
        });
    };
    Task.prototype.processTask = function (taskCallback) {
        var _this = this;
        var channelPromise = ChannelManager_1.channelManager.getChannel();
        return channelPromise
            .then(function () { return _this.assertQueue(); })
            .then(function (channel) {
            channel.prefetch(1);
            channel.consume(_this.queueName, function (msg) {
                var taskData = JSON.parse(msg.content.toString());
                taskCallback(taskData, function () {
                    channel.ack(msg);
                });
            }, { noAck: false });
        });
    };
    return Task;
})();
exports.Task = Task;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFzay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9UYXNrLnRzIl0sIm5hbWVzIjpbIlRhc2siLCJUYXNrLmNvbnN0cnVjdG9yIiwiVGFzay5leGNoYW5nZU5hbWUiLCJUYXNrLnF1ZXVlTmFtZSIsIlRhc2suc3RhcnQiLCJUYXNrLmFzc2VydEV4Y2hhbmdlIiwiVGFzay5hc3NlcnRRdWV1ZSIsIlRhc2suYmluZFF1ZXVlIiwiVGFzay5wdXJnZVF1ZXVlIiwiVGFzay5wcm9jZXNzVGFzayJdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCLGtCQUMvQixDQUFDLENBRGdEO0FBR2pELElBQU8sSUFBSSxXQUFXLFdBQVcsQ0FBQyxDQUFBO0FBQ2xDLElBQU8sQ0FBQyxXQUFXLFFBQVEsQ0FBQyxDQUFBO0FBRTVCLElBQU0sZUFBZSxHQUFHLGNBQWMsQ0FBQztBQUN2QyxJQUFNLGdCQUFnQixHQUFHLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLENBQUM7QUFFNUQsSUFBTSxnQkFBZ0IsR0FBRyxvQkFBb0IsQ0FBQztBQUM5QyxJQUFNLGlCQUFpQixHQUFHLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLENBQUM7QUFPN0Q7SUFNRUEsY0FBWUEsSUFBV0EsRUFBRUEsTUFBa0JBO1FBQ3pDQyxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDakJBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBO0lBQ3ZCQSxDQUFDQTtJQUVERCxzQkFBSUEsOEJBQVlBO2FBQWhCQTtZQUNFRSxNQUFNQSxDQUFDQSxlQUFlQSxHQUFHQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxPQUFPQSxDQUFDQTtRQUNwREEsQ0FBQ0E7OztPQUFBRjtJQUVEQSxz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