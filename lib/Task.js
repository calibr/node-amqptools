var uuid = require("node-uuid");
var _ = require("lodash");
var EXCHANGE_PREFIX = "nimbus:jobs:";
var EXCHANGE_OPTIONS = { durable: true, autoDelete: false };
var JOB_QUEUE_PREFIX = "nimbus:jobs:queue:";
var JOB_QUEUE_OPTIONS = { durable: true, autoDelete: false };
var Task = (function () {
    function Task(type, params) {
        this.uuid = uuid.v4();
        this.type = type;
        this.params = params;
    }
    Object.defineProperty(Task.prototype, "exchangeName", {
        get: function () {
            return EXCHANGE_PREFIX + Task.taskManager.service;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "queueName", {
        get: function () {
            return JOB_QUEUE_PREFIX + this.type;
        },
        enumerable: true,
        configurable: true
    });
    Task.prototype.getChannel = function () {
        return Task.taskManager.getChannel();
    };
    Task.prototype.start = function (done) {
        var _this = this;
        if (!this.params)
            return;
        var channelPromise = this.getChannel();
        channelPromise
            .then(function () { return _this.assertExchange(channelPromise); })
            .then(function () { return _this.assertQueue(channelPromise); })
            .then(function () { return _this.bindQueue(channelPromise); })
            .then(function (channel) {
            var params = _.clone(_this.params);
            params['uuid'] = _this.uuid;
            var eventData = new Buffer(JSON.stringify(params));
            channel.publish(_this.exchangeName, _this.type, eventData);
            if (done)
                done();
        });
        return this;
    };
    Task.prototype.assertExchange = function (channelPromise) {
        var _this = this;
        return channelPromise.then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertExchange(_this.exchangeName, 'direct', EXCHANGE_OPTIONS, function (err) {
                    if (err)
                        return reject(err);
                    resolve(channel);
                });
            });
        });
    };
    Task.prototype.assertQueue = function (channelPromise) {
        var _this = this;
        return channelPromise.then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertQueue(_this.queueName, JOB_QUEUE_OPTIONS, function (err) {
                    if (err)
                        return reject(err);
                    resolve(channel);
                });
            });
        });
    };
    Task.prototype.bindQueue = function (channelPromise) {
        var _this = this;
        return channelPromise.then(function (channel) {
            channel.bindQueue(_this.queueName, _this.exchangeName, _this.type);
            return channel;
        });
    };
    Task.prototype.purgeQueue = function () {
        var _this = this;
        return this.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.checkQueue(_this.queueName, function (err, ok) {
                    if (err)
                        return resolve(null);
                    if (ok) {
                        return channel.purgeQueue(_this.queueName, function (err, reply) {
                            if (err)
                                return reject(err);
                            resolve(reply);
                        });
                    }
                    resolve(null);
                });
            });
        });
    };
    Task.prototype.processTask = function (taskCallback) {
        var _this = this;
        var channelPromise = this.getChannel();
        return channelPromise
            .then(function () { return _this.assertQueue(channelPromise); })
            .then(function (channel) {
            channel.prefetch(1);
            channel.consume(_this.queueName, function (msg) {
                var taskData = JSON.parse(msg.content.toString());
                taskCallback(taskData, function () {
                    channel.ack(msg);
                });
            }, { noAck: false });
        });
    };
    return Task;
})();
exports.Task = Task;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFzay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9UYXNrLnRzIl0sIm5hbWVzIjpbIlRhc2siLCJUYXNrLmNvbnN0cnVjdG9yIiwiVGFzay5leGNoYW5nZU5hbWUiLCJUYXNrLnF1ZXVlTmFtZSIsIlRhc2suZ2V0Q2hhbm5lbCIsIlRhc2suc3RhcnQiLCJUYXNrLmFzc2VydEV4Y2hhbmdlIiwiVGFzay5hc3NlcnRRdWV1ZSIsIlRhc2suYmluZFF1ZXVlIiwiVGFzay5wdXJnZVF1ZXVlIiwiVGFzay5wcm9jZXNzVGFzayJdLCJtYXBwaW5ncyI6IkFBRUEsSUFBTyxJQUFJLFdBQVcsV0FBVyxDQUFDLENBQUE7QUFDbEMsSUFBTyxDQUFDLFdBQVcsUUFBUSxDQUFDLENBQUE7QUFFNUIsSUFBTSxlQUFlLEdBQUcsY0FBYyxDQUFDO0FBQ3ZDLElBQU0sZ0JBQWdCLEdBQUcsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsQ0FBQztBQUU1RCxJQUFNLGdCQUFnQixHQUFHLG9CQUFvQixDQUFDO0FBQzlDLElBQU0saUJBQWlCLEdBQUcsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsQ0FBQztBQU83RDtJQU1FQSxjQUFZQSxJQUFXQSxFQUFFQSxNQUFrQkE7UUFDekNDLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUNqQkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0E7SUFDdkJBLENBQUNBO0lBRURELHNCQUFJQSw4QkFBWUE7YUFBaEJBO1lBQ0VFLE1BQU1BLENBQUNBLGVBQWVBLEdBQUdBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLE9BQU9BLENBQUNBO1FBQ3BEQSxDQUFDQTs7O09BQUFGO0lBRURBLHNCQUFJQSwyQkFBU0E7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