var ChannelManager_1 = require('./ChannelManager');
var EXCHANGE_PREFIX = "nimbus:event:";
var EXCHANGE_ALL_EVENTS = "nimbus:events";
var EXCHANGE_EVENTS_BY_USER = "nimbus:eventsByUser";
var QUEUE_PREFIX = "nimbus:listener:";
var QUEUE_OPTIONS = { durable: false, autoDelete: true, exclusive: true };
var QUEUE_RUNTIME_OPTIONS = { durable: false, autoDelete: true };
var EXCHANGE_OPTIONS = { durable: true, autoDelete: false };
var EventListener = (function () {
    function EventListener(options) {
        this.exchange = options.exchange;
        this.topic = options.topic;
        this.userId = options.userId;
        this.queueOptions = QUEUE_OPTIONS;
        if (options.runtime) {
            this.queue = QUEUE_PREFIX + options.runtime +
                (this.exchange ? ':' + this.exchange : '') +
                (this.topic ? ':' + this.topic : '');
            this.queueOptions = QUEUE_RUNTIME_OPTIONS;
        }
    }
    Object.defineProperty(EventListener.prototype, "fullExchangeName", {
        get: function () {
            if (this.userId) {
                return EXCHANGE_EVENTS_BY_USER;
            }
            return this.exchange ? EXCHANGE_PREFIX + this.exchange : EXCHANGE_ALL_EVENTS;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EventListener.prototype, "queueName", {
        get: function () {
            return this.queue;
        },
        set: function (val) {
            this.queue = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EventListener.prototype, "routeKey", {
        get: function () {
            if (!this.topic && !this.exchange && !this.userId)
                return '#';
            return [this.exchange, this.topic]
                .map(function (str) { return (str ? str : '*'); })
                .join('.')
                .concat(this.userId ? '.' + this.userId : '');
        },
        enumerable: true,
        configurable: true
    });
    EventListener.prototype.assertExchange = function () {
        var _this = this;
        return ChannelManager_1.channelManager.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertExchange(_this.fullExchangeName, "topic", EXCHANGE_OPTIONS, function (err) { return err ? reject(err) : resolve(channel); });
            });
        });
    };
    EventListener.prototype.assertQueue = function () {
        var _this = this;
        return ChannelManager_1.channelManager.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertQueue(_this.queueName, _this.queueOptions, function (err, ok) {
                    if (err)
                        return reject(err);
                    _this.queueName = ok.queue;
                    resolve(channel);
                });
            });
        });
    };
    EventListener.prototype.bindQueue = function () {
        var _this = this;
        return ChannelManager_1.channelManager.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.bindQueue(_this.queueName, _this.fullExchangeName, _this.routeKey, {}, function (err) { return err ? reject(err) : resolve(channel); });
            });
        });
    };
    EventListener.prototype.listen = function (listener) {
        var _this = this;
        return this.assertExchange()
            .then(function () { return _this.assertQueue(); })
            .then(function () { return _this.bindQueue(); })
            .then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.consume(_this.queueName, function (msg) {
                    var message = JSON.parse(msg.content.toString());
                    listener(message);
                    channel.ack(msg);
                });
                resolve(null);
            });
        });
    };
    return EventListener;
})();
exports.EventListener = EventListener;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRMaXN0ZW5lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9FdmVudExpc3RlbmVyLnRzIl0sIm5hbWVzIjpbIkV2ZW50TGlzdGVuZXIiLCJFdmVudExpc3RlbmVyLmNvbnN0cnVjdG9yIiwiRXZlbnRMaXN0ZW5lci5mdWxsRXhjaGFuZ2VOYW1lIiwiRXZlbnRMaXN0ZW5lci5xdWV1ZU5hbWUiLCJFdmVudExpc3RlbmVyLnJvdXRlS2V5IiwiRXZlbnRMaXN0ZW5lci5hc3NlcnRFeGNoYW5nZSIsIkV2ZW50TGlzdGVuZXIuYXNzZXJ0UXVldWUiLCJFdmVudExpc3RlbmVyLmJpbmRRdWV1ZSIsIkV2ZW50TGlzdGVuZXIubGlzdGVuIl0sIm1hcHBpbmdzIjoiQUFBQSwrQkFBK0Isa0JBQy9CLENBQUMsQ0FEZ0Q7QUFHakQsSUFBTSxlQUFlLEdBQUcsZUFBZSxDQUFDO0FBQ3hDLElBQU0sbUJBQW1CLEdBQUcsZUFBZSxDQUFDO0FBQzVDLElBQU0sdUJBQXVCLEdBQUcscUJBQXFCLENBQUM7QUFDdEQsSUFBTSxZQUFZLEdBQUcsa0JBQWtCLENBQUM7QUFDeEMsSUFBTSxhQUFhLEdBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBQyxDQUFDO0FBQzVFLElBQU0scUJBQXFCLEdBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUMsQ0FBQztBQUNuRSxJQUFNLGdCQUFnQixHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFTOUQ7SUFPRUEsdUJBQVlBLE9BQXdDQTtRQUNsREMsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0E7UUFDakNBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBO1FBQzNCQSxJQUFJQSxD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