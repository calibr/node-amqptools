/// <reference path="../typings/tsd.d.ts" />
var EXCHANGE_PREFIX = "nimbus:event:";
var EXCHANGE_ALL_EVENTS = "nimbus:events";
var QUEUE_PREFIX = "nimbus:listener:";
var QUEUE_OPTIONS = { durable: false, autoDelete: true, exclusive: true };
var EXCHANGE_OPTIONS = { durable: true, autoDelete: false };
var EventListener = (function () {
    function EventListener(options) {
        this.exchange = options.exchange;
        this.topic = options.topic;
        if (options.runtime)
            this.queue = QUEUE_PREFIX + options.runtime;
        if (options.channelManager)
            EventListener.channelManager = options.channelManager;
    }
    EventListener.getChannel = function () {
        return EventListener.channelManager.getChannel();
    };
    Object.defineProperty(EventListener.prototype, "fullExchangeName", {
        get: function () {
            return this.exchange ? EXCHANGE_PREFIX + this.exchange : EXCHANGE_ALL_EVENTS;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EventListener.prototype, "queueName", {
        get: function () {
            return this.queue;
        },
        set: function (val) {
            this.queue = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EventListener.prototype, "routeKey", {
        get: function () {
            if (!this.topic && !this.exchange)
                return '#';
            return (this.exchange ? this.exchange : '*') + '.' + (this.topic ? this.topic : '*');
        },
        enumerable: true,
        configurable: true
    });
    EventListener.prototype.assertExchange = function (channelPromise) {
        var _this = this;
        return channelPromise.then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertExchange(_this.fullExchangeName, "topic", EXCHANGE_OPTIONS, function (err) { return err ? reject(err) : resolve(channel); });
            });
        });
    };
    EventListener.prototype.assertQueue = function (channelPromise) {
        var _this = this;
        return channelPromise.then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertQueue(_this.queueName, QUEUE_OPTIONS, function (err, ok) {
                    if (err)
                        return reject(err);
                    _this.queueName = ok.queue;
                    resolve(channel);
                });
            });
        });
    };
    EventListener.prototype.bindQueue = function (channelPromise) {
        var _this = this;
        return channelPromise.then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.bindQueue(_this.queueName, _this.fullExchangeName, _this.routeKey, {}, function (err) { return err ? reject(err) : resolve(channel); });
            });
        });
    };
    EventListener.prototype.listen = function (listener) {
        var _this = this;
        var channelPromise = EventListener.getChannel();
        return this.assertExchange(channelPromise)
            .then(function () { return _this.assertQueue(channelPromise); })
            .then(function () { return _this.bindQueue(channelPromise); })
            .then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.consume(_this.queueName, function (msg) {
                    var message = JSON.parse(msg.content.toString());
                    listener(message);
                    channel.ack(msg);
                });
                resolve(null);
            });
        });
    };
    return EventListener;
})();
exports.EventListener = EventListener;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRMaXN0ZW5lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9FdmVudExpc3RlbmVyLnRzIl0sIm5hbWVzIjpbIkV2ZW50TGlzdGVuZXIiLCJFdmVudExpc3RlbmVyLmNvbnN0cnVjdG9yIiwiRXZlbnRMaXN0ZW5lci5nZXRDaGFubmVsIiwiRXZlbnRMaXN0ZW5lci5mdWxsRXhjaGFuZ2VOYW1lIiwiRXZlbnRMaXN0ZW5lci5xdWV1ZU5hbWUiLCJFdmVudExpc3RlbmVyLnJvdXRlS2V5IiwiRXZlbnRMaXN0ZW5lci5hc3NlcnRFeGNoYW5nZSIsIkV2ZW50TGlzdGVuZXIuYXNzZXJ0UXVldWUiLCJFdmVudExpc3RlbmVyLmJpbmRRdWV1ZSIsIkV2ZW50TGlzdGVuZXIubGlzdGVuIl0sIm1hcHBpbmdzIjoiQUFBQSw0Q0FBNEM7QUFJNUMsSUFBTSxlQUFlLEdBQUcsZUFBZSxDQUFDO0FBQ3hDLElBQU0sbUJBQW1CLEdBQUcsZUFBZSxDQUFDO0FBQzVDLElBQU0sWUFBWSxHQUFHLGtCQUFrQixDQUFDO0FBQ3hDLElBQU0sYUFBYSxHQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUMsQ0FBQztBQUM1RSxJQUFNLGdCQUFnQixHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFTOUQ7SUFPRUEsdUJBQVlBLE9BQXdDQTtRQUNsREMsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0E7UUFDakNBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBO1FBQzNCQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQTtZQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxZQUFZQSxHQUFHQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFD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