var ChannelManager_1 = require('./ChannelManager');
var EXCHANGE_OPTIONS = { durable: true, autoDelete: false };
var Event = (function () {
    function Event(options) {
        this.exchange = options.exchange;
        this.topic = options.topic ? options.topic : 'nimbusEvent';
        this.exchangeOptions = options.exchangeOptions;
    }
    Event.prototype.send = function (object) {
        return this.sendString(this.prepareMessage(object));
    };
    Object.defineProperty(Event.prototype, "routeKey", {
        get: function () {
            return this.topic;
        },
        enumerable: true,
        configurable: true
    });
    Event.prototype.assertExchange = function () {
        var _this = this;
        return ChannelManager_1.channelManager.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertExchange(_this.exchange, "topic", _this.exchangeOptions, function (err) { return err ? reject(err) : resolve(channel); });
            });
        });
    };
    Event.prototype.sendBuffer = function (buffer) {
        var _this = this;
        return ChannelManager_1.channelManager.getChannel()
            .then(function () { return _this.assertExchange(); })
            .then(function (channel) {
            channel.publish(_this.exchange, _this.routeKey, buffer, {
                contentType: "text/json"
            });
        });
    };
    Event.prototype.sendString = function (string) {
        return this.sendBuffer(new Buffer(string));
    };
    Event.prototype.prepareMessage = function (object) {
        var message = {
            exchange: this.exchange,
            topic: this.topic,
            content: object
        };
        return JSON.stringify(message);
    };
    return Event;
})();
exports.Event = Event;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvRXZlbnQudHMiXSwibmFtZXMiOlsiRXZlbnQiLCJFdmVudC5jb25zdHJ1Y3RvciIsIkV2ZW50LnNlbmQiLCJFdmVudC5yb3V0ZUtleSIsIkV2ZW50LmFzc2VydEV4Y2hhbmdlIiwiRXZlbnQuc2VuZEJ1ZmZlciIsIkV2ZW50LnNlbmRTdHJpbmciLCJFdmVudC5wcmVwYXJlTWVzc2FnZSJdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCLGtCQUMvQixDQUFDLENBRGdEO0FBQ2pELElBQU0sZ0JBQWdCLEdBQUcsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsQ0FBQztBQVE1RDtJQUtFQSxlQUFZQSxPQUErQkE7UUFDekNDLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBO1FBQ2pDQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxPQUFPQSxDQUFDQSxLQUFLQSxHQUFHQSxPQUFPQSxDQUFDQSxLQUFLQSxHQUFHQSxhQUFhQSxDQUFDQTtRQUMzREEsSUFBSUEsQ0FBQ0EsZUFBZUEsR0FBR0EsT0FBT0EsQ0FBQ0EsZUFBZUEsQ0FBQ0E7SUFDakRBLENBQUNBO0lBRURELG9CQUFJQSxHQUFKQSxVQUFLQSxNQUFVQTtRQUNiRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUN0REEsQ0FBQ0E7SUFFREYsc0JBQUlBLDJCQUFRQTthQUFaQTtZQUNFRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFBQTtRQUNuQkEsQ0FBQ0E7OztPQUFBSDtJQUVPQSw4QkFBY0EsR0FBdEJBO1FBQUFJLGlCQU9DQTtRQU5DQSxNQUFNQSxDQUFDQSwrQkFBY0EsQ0FBQ0EsVUFBVUEsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBQ0EsT0FBT0E7WUFDOUNBLE1BQU1BLENBQUNBLElBQUlBLE9BQU9BLENBQUNBLFVBQUNBLE9BQU9BLEVBQUVBLE1BQU1BO2dCQUNqQ0EsT0FBT0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsS0FBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsT0FBT0EsRUFBRUEsS0FBSUEsQ0FBQ0EsZUFBZUEsRUFDakVBLFVBQUNBLEdBQUdBLElBQUtBLE9BQUFBLEdBQUdBLEdBQUdBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEVBQXBDQSxDQUFvQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkRBLENBQUNBLENBQUNBLENBQUFBO1FBQ0pBLENBQUNBLENBQUNBLENBQUFBO0lBQ0pBLENBQUNBO0lBRURKLDBCQUFVQSxHQUFWQSxVQUFXQSxNQUFNQTtRQUFqQkssaUJBUUNBO1FBUENBLE1BQU1BLENBQUNBLCtCQUFjQSxDQUFDQSxVQUFVQSxFQUFFQTthQUMvQkEsSUFBSUEsQ0FBQ0EsY0FBTUEsT0FBQUEsS0FBSUEsQ0FBQ0EsY0FBY0EsRUFBRUEsRUFBckJBLENBQXFCQSxDQUFDQTthQUNqQ0EsSUFBSUEsQ0FBQ0EsVUFBQ0EsT0FBT0E7WUFDWkEsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsS0FBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsTUFBTUEsRUFBRUE7Z0JBQ3BEQSxXQUFXQSxFQUFFQSxXQUFXQTthQUN6QkEsQ0FBQ0EsQ0FBQ0E7UUFDTEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7SUFFREwsMEJBQVVBLEdBQVZBLFVBQVdBLE1BQWFBO1FBQ3RCTSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUM3Q0EsQ0FBQ0E7SUFFRE4sOEJBQWNBLEdBQWRBLFVBQWVBLE1BQVVBO1FBQ3ZCTyxJQUFJQSxPQUFPQSxHQUFHQTtZQUNaQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQTtZQUN2QkEsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsS0FBS0E7WUFDakJBLE9BQU9BLEVBQUVBLE1BQU1BO1NBQ2hCQSxDQUFDQTtRQUVGQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtJQUNqQ0EsQ0FBQ0E7SUFDSFAsWUFBQ0E7QUFBREEsQ0FBQ0EsQUFuREQsSUFtREM7QUFuRFksYUFBSyxRQW1EakIsQ0FBQSJ9