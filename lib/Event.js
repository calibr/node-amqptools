var ChannelManager_1 = require('./ChannelManager');
var EXCHANGE_PREFIX = "nimbus:event:";
var EXCHANGE_ALL_EVENTS = "nimbus:events";
var EXCHANGE_OPTIONS = { durable: true, autoDelete: false };
var Event = (function () {
    function Event(options) {
        this.exchange = options.exchange;
        this.topic = options.topic ? options.topic : 'nimbusEvent';
    }
    Event.prototype.send = function (object) {
        return this.sendString(this.prepareMessage(object));
    };
    Object.defineProperty(Event.prototype, "fullExchangeName", {
        get: function () {
            return EXCHANGE_PREFIX + this.exchange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Event.prototype, "routeKey", {
        get: function () {
            return this.exchange + '.' + this.topic;
        },
        enumerable: true,
        configurable: true
    });
    Event.prototype.assertExchange = function () {
        var _this = this;
        return ChannelManager_1.channelManager.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertExchange(_this.fullExchangeName, "topic", EXCHANGE_OPTIONS, function (err) { return err ? reject(err) : resolve(channel); });
            });
        });
    };
    Event.prototype.assertExchangeForAllEvents = function () {
        return ChannelManager_1.channelManager.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertExchange(EXCHANGE_ALL_EVENTS, "topic", EXCHANGE_OPTIONS, function (err) { return err ? reject(err) : resolve(channel); });
            });
        });
    };
    Event.prototype.bindToExchangeForAllEvents = function () {
        var _this = this;
        return ChannelManager_1.channelManager.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.bindExchange(EXCHANGE_ALL_EVENTS, _this.fullExchangeName, "#", {}, function (err) { return err ? reject(err) : resolve(channel); });
            });
        });
    };
    Event.prototype.sendBuffer = function (buffer) {
        var _this = this;
        return ChannelManager_1.channelManager.getChannel()
            .then(function () { return _this.assertExchange(); })
            .then(function () { return _this.assertExchangeForAllEvents(); })
            .then(function () { return _this.bindToExchangeForAllEvents(); })
            .then(function (channel) {
            channel.publish(_this.fullExchangeName, _this.routeKey, buffer, {
                contentType: "text/json"
            });
        });
    };
    Event.prototype.sendString = function (string) {
        return this.sendBuffer(new Buffer(string));
    };
    Event.prototype.prepareMessage = function (object) {
        var message = {
            exchange: this.exchange,
            topic: this.topic,
            content: object
        };
        return JSON.stringify(message);
    };
    return Event;
})();
exports.Event = Event;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvRXZlbnQudHMiXSwibmFtZXMiOlsiRXZlbnQiLCJFdmVudC5jb25zdHJ1Y3RvciIsIkV2ZW50LnNlbmQiLCJFdmVudC5mdWxsRXhjaGFuZ2VOYW1lIiwiRXZlbnQucm91dGVLZXkiLCJFdmVudC5hc3NlcnRFeGNoYW5nZSIsIkV2ZW50LmFzc2VydEV4Y2hhbmdlRm9yQWxsRXZlbnRzIiwiRXZlbnQuYmluZFRvRXhjaGFuZ2VGb3JBbGxFdmVudHMiLCJFdmVudC5zZW5kQnVmZmVyIiwiRXZlbnQuc2VuZFN0cmluZyIsIkV2ZW50LnByZXBhcmVNZXNzYWdlIl0sIm1hcHBpbmdzIjoiQUFBQSwrQkFBK0Isa0JBQy9CLENBQUMsQ0FEZ0Q7QUFDakQsSUFBTSxlQUFlLEdBQUcsZUFBZSxDQUFDO0FBQ3hDLElBQU0sbUJBQW1CLEdBQUcsZUFBZSxDQUFDO0FBQzVDLElBQU0sZ0JBQWdCLEdBQUcsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsQ0FBQztBQU81RDtJQUlFQSxlQUFZQSxPQUErQkE7UUFDekNDLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBO1FBQ2pDQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxPQUFPQSxDQUFDQSxLQUFLQSxHQUFHQSxPQUFPQSxDQUFDQSxLQUFLQSxHQUFHQSxhQUFhQSxDQUFDQTtJQUM3REEsQ0FBQ0E7SUFFREQsb0JBQUlBLEdBQUpBLFVBQUtBLE1BQVVBO1FBQ2JFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO0lBQ3REQSxDQUFDQTtJQUVERixzQkFBSUEsbUNBQWdCQTthQUFwQkE7WUFDRUcsTUFBTUEsQ0FBQ0EsZUFBZUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FB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