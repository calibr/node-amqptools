/// <reference path="../typings/tsd.d.ts" />
var EXCHANGE_PREFIX = "nimbus:event:";
var EXCHANGE_ALL_EVENTS = "nimbus:events";
var EXCHANGE_OPTIONS = { durable: true, autoDelete: false };
var Event = (function () {
    function Event(options) {
        if (options.channelManager)
            Event.channelManager = options.channelManager;
        this.exchange = options.exchange;
        this.topic = options.topic ? options.topic : 'nimbusEvent';
    }
    Event.prototype.send = function (object) {
        return this.sendString(this.prepareMessage(object));
    };
    Event.getChannel = function () {
        return Event.channelManager.getChannel();
    };
    Object.defineProperty(Event.prototype, "fullExchangeName", {
        get: function () {
            return EXCHANGE_PREFIX + this.exchange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Event.prototype, "routeKey", {
        get: function () {
            return this.exchange + '.' + this.topic;
        },
        enumerable: true,
        configurable: true
    });
    Event.prototype.assertExchange = function (channelManager) {
        var _this = this;
        return channelManager.then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertExchange(_this.fullExchangeName, "topic", EXCHANGE_OPTIONS, function (err) { return err ? reject(err) : resolve(channel); });
            });
        });
    };
    Event.prototype.assertExchangeForAllEvents = function (channelManager) {
        return channelManager.then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertExchange(EXCHANGE_ALL_EVENTS, "topic", EXCHANGE_OPTIONS, function (err) { return err ? reject(err) : resolve(channel); });
            });
        });
    };
    Event.prototype.bindToExchangeForAllEvents = function (channelManager) {
        var _this = this;
        return channelManager.then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.bindExchange(EXCHANGE_ALL_EVENTS, _this.fullExchangeName, "#", {}, function (err) { return err ? reject(err) : resolve(channel); });
            });
        });
    };
    Event.prototype.sendBuffer = function (buffer) {
        var _this = this;
        var channelManager = Event.getChannel();
        return channelManager
            .then(function () { return _this.assertExchange(channelManager); })
            .then(function () { return _this.assertExchangeForAllEvents(channelManager); })
            .then(function () { return _this.bindToExchangeForAllEvents(channelManager); })
            .then(function (channel) {
            channel.publish(_this.fullExchangeName, _this.routeKey, buffer, {
                contentType: "text/json"
            });
        });
    };
    Event.prototype.sendString = function (string) {
        return this.sendBuffer(new Buffer(string));
    };
    Event.prototype.prepareMessage = function (object) {
        var message = {
            exchange: this.exchange,
            topic: this.topic,
            route: this.routeKey,
            content: object
        };
        return JSON.stringify(message);
    };
    return Event;
})();
exports.Event = Event;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvRXZlbnQudHMiXSwibmFtZXMiOlsiRXZlbnQiLCJFdmVudC5jb25zdHJ1Y3RvciIsIkV2ZW50LnNlbmQiLCJFdmVudC5nZXRDaGFubmVsIiwiRXZlbnQuZnVsbEV4Y2hhbmdlTmFtZSIsIkV2ZW50LnJvdXRlS2V5IiwiRXZlbnQuYXNzZXJ0RXhjaGFuZ2UiLCJFdmVudC5hc3NlcnRFeGNoYW5nZUZvckFsbEV2ZW50cyIsIkV2ZW50LmJpbmRUb0V4Y2hhbmdlRm9yQWxsRXZlbnRzIiwiRXZlbnQuc2VuZEJ1ZmZlciIsIkV2ZW50LnNlbmRTdHJpbmciLCJFdmVudC5wcmVwYXJlTWVzc2FnZSJdLCJtYXBwaW5ncyI6IkFBQUEsNENBQTRDO0FBRzVDLElBQU0sZUFBZSxHQUFHLGVBQWUsQ0FBQztBQUN4QyxJQUFNLG1CQUFtQixHQUFHLGVBQWUsQ0FBQztBQUM1QyxJQUFNLGdCQUFnQixHQUFHLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLENBQUM7QUFRNUQ7SUFLRUEsZUFBWUEsT0FBK0JBO1FBQ3pDQyxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxjQUFjQSxDQUFDQTtZQUFDQSxLQUFLQSxDQUFDQSxjQUFjQSxHQUFHQSxPQUFPQSxDQUFDQSxjQUFjQSxDQUFDQTtRQUMxRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0E7UUFDakNBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLE9BQU9BLENBQUNBLEtBQUtBLEdBQUdBLE9BQU9BLENBQUNBLEtBQUtBLEdBQUdBLGFBQWFBLENBQUNBO0lBQzdEQSxDQUFDQTtJQUVERCxvQkFBSUEsR0FBSkEsVUFBS0EsTUFBVUE7UUFDYkUsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsTUFBTUEsQ0FBQ0Es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