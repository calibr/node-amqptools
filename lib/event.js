/// <reference path="../typings/tsd.d.ts" />
var events = require("events");
var util = require("util");
var async = require("async");
var EXCHANGE_PREFIX = "_event:";
var QUEUE_PREFIX = "_queue:";
var EventEmitter = events.EventEmitter, addListenerMethods = ["addListener", "on", "once"], copyMethods = ["removeListener", "removeAllListeners", "setMaxListeners", "listeners"];
var channel = null;
function _parseEvent(event) {
    var tmp = event.split(":");
    return {
        exchange: EXCHANGE_PREFIX + ":" + tmp[0],
        topic: tmp[1]
    };
}
function _getChannel(cb) {
    cb(null, channel);
}
function AMQPEventEmitter(runtime) {
    this.runtime = runtime || "";
    this.ee = new EventEmitter();
    this.eventsQueues = {};
    var self = this;
    addListenerMethods.forEach(function (method) {
        self[method] = function (event, cb, eventSetCb) {
            if (["newListener", "removeListener"].indexOf(event) !== -1) {
                return self.ee[method].call(self.ee, event, cb);
            }
            self._preListen(event, function (err) {
                if (!err) {
                    self.ee[method].call(self.ee, event, cb);
                }
                if (eventSetCb) {
                    eventSetCb(err);
                }
            });
        };
    });
    copyMethods.forEach(function (method) {
        self[method] = function () {
            var args = [].slice.call(arguments);
            self.ee[method].apply(self.ee, args);
        };
    });
}
;
AMQPEventEmitter.prototype.emit = function () {
    var args = [].slice.call(arguments), event = args.shift(), eParsed = _parseEvent(event), self = this;
    self._preListen(event, function (err) {
        if (!err) {
            _getChannel(function (err, chan) {
                if (err) {
                    return;
                }
                var buffer = new Buffer(JSON.stringify(args));
                chan.publish(eParsed.exchange, eParsed.topic, buffer, {
                    contentType: "text/json"
                });
            });
        }
    });
};
AMQPEventEmitter.prototype._assertExchange = function (name, cb) {
    _getChannel(function (err, chan) {
        if (err) {
            return cb(err);
        }
        chan.assertExchange(name, "direct", {
            durable: false,
            autoDelete: true
        }, function (err) {
            return cb(err);
        });
    });
};
AMQPEventEmitter.prototype._createQueue = function (event, cb) {
    var eParsed = _parseEvent(event);
    var self = this;
    _getChannel(function (err, chan) {
        if (err) {
            return cb(err);
        }
        var queueName = QUEUE_PREFIX + self.runtime + ":" + eParsed.exchange;
        if (eParsed.topic) {
            queueName += ":" + eParsed.topic;
        }
        chan.assertQueue(queueName, {
            durable: false,
            autoDelete: true
        }, function (err, attrs) {
            if (err) {
                return cb(err);
            }
            chan.bindQueue(queueName, eParsed.exchange, eParsed.topic, {}, function (err) {
                if (err) {
                    return cb(err);
                }
                self.eventsQueues[event] = queueName;
                chan.consume(queueName, function (msg) {
                    var content = JSON.parse(msg.content), args = [];
                    if (util.isArray(content)) {
                        args = [event].concat(content);
                    }
                    else {
                        args = [event, content];
                    }
                    chan.ack(msg);
                    self.ee.emit.apply(self.ee, args);
                });
                cb(null);
            });
        });
    });
};
AMQPEventEmitter.prototype._preListen = function (event, cb) {
    var self = this;
    AMQPEventEmitter._connect(function () {
        var eParsed = _parseEvent(event);
        self._assertExchange(eParsed.exchange, function (err) {
            if (err) {
                return cb(err);
            }
            async.series([
                function (next) {
                    if (self.eventsQueues[event]) {
                        return next();
                    }
                    self._createQueue(event, function (err) {
                        if (err) {
                            return cb(err);
                        }
                        next();
                    });
                },
                function () {
                    cb(null);
                }
            ]);
        });
    });
};
AMQPEventEmitter.setChannel = function (_channel) {
    channel = _channel;
};
module.exports = AMQPEventEmitter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZXZlbnQudHMiXSwibmFtZXMiOlsiX3BhcnNlRXZlbnQiLCJfZ2V0Q2hhbm5lbCIsIkFNUVBFdmVudEVtaXR0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLDRDQUE0QztBQUU1QyxJQUFPLE1BQU0sV0FBVyxRQUFRLENBQUMsQ0FBQTtBQUNqQyxJQUFPLElBQUksV0FBVyxNQUFNLENBQUMsQ0FBQTtBQUM3QixJQUFPLEtBQUssV0FBVyxPQUFPLENBQUMsQ0FBQTtBQUUvQixJQUFNLGVBQWUsR0FBRyxTQUFTLENBQUM7QUFDbEMsSUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDO0FBRS9CLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQ3BDLGtCQUFrQixHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsRUFDbEQsV0FBVyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsb0JBQW9CLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFFekYsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBRW5CLHFCQUFxQixLQUFLO0lBQ3hCQSxJQUFJQSxHQUFHQSxHQUFHQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUMzQkEsTUFBTUEsQ0FBQ0E7UUFDTEEsUUFBUUEsRUFBRUEsZUFBZUEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDeENBLEtBQUtBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO0tBQ2RBLENBQUNBO0FBQ0pBLENBQUNBO0FBRUQscUJBQXFCLEVBQUU7SUFDckJDLEVBQUVBLENBQUNBLElBQUlBLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBO0FBQ3BCQSxDQUFDQTtBQUVELDBCQUEyQixPQUFPO0lBQ2hDQyxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxPQUFPQSxJQUFJQSxFQUFF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