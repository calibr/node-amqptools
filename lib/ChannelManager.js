var amqpLib = require("amqplib/callback_api");
var Promise = require('bluebird');
var ChannelManager = (function () {
    function ChannelManager() {
        this.connectCallbacks = [];
    }
    ChannelManager.prototype.connect = function (cb) {
        var _this = this;
        if (this.channel) {
            return cb(null, this.channel);
        }
        this.connectCallbacks.push(cb);
        if (this.connectInProgress)
            return;
        this.connectInProgress = true;
        amqpLib.connect(this.connectionURI, function (err, connection) {
            if (err)
                return _this.connectRespond(err, null);
            _this.connection = connection;
            _this.connection.createChannel(function (err, channel) {
                if (err)
                    return _this.connectRespond(err, null);
                _this.channel = channel;
                _this.connectRespond(null, _this.channel);
            });
        });
    };
    ChannelManager.prototype.connectRespond = function (err, channel) {
        this.connectInProgress = false;
        this.connectCallbacks.forEach(function (extraCb) {
            extraCb(err, channel);
        });
        this.connectCallbacks = [];
    };
    ChannelManager.prototype.getChannel = function () {
        var _this = this;
        if (!this.channelPromise) {
            this.channelPromise = new Promise(function (resolve, reject) {
                _this.connect(function (err, channel) {
                    if (err)
                        return reject(err);
                    resolve(channel);
                });
            });
        }
        return this.channelPromise;
    };
    ChannelManager.prototype.setConnectionURI = function (uri) {
        this.connectionURI = uri;
    };
    ChannelManager.prototype.disconnect = function (cb) {
        var _this = this;
        if (!this.connection) {
            return cb();
        }
        this.connection.close(function () {
            _this.connection = null;
            _this.channel = null;
            _this.channelPromise = null;
            cb();
        });
    };
    ChannelManager.prototype.reconnect = function (cb) {
        var _this = this;
        this.disconnect(function () {
            _this.connect(cb);
        });
    };
    return ChannelManager;
})();
module.exports = ChannelManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhbm5lbE1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvQ2hhbm5lbE1hbmFnZXIudHMiXSwibmFtZXMiOlsiQ2hhbm5lbE1hbmFnZXIiLCJDaGFubmVsTWFuYWdlci5jb25zdHJ1Y3RvciIsIkNoYW5uZWxNYW5hZ2VyLmNvbm5lY3QiLCJDaGFubmVsTWFuYWdlci5jb25uZWN0UmVzcG9uZCIsIkNoYW5uZWxNYW5hZ2VyLmdldENoYW5uZWwiLCJDaGFubmVsTWFuYWdlci5zZXRDb25uZWN0aW9uVVJJIiwiQ2hhbm5lbE1hbmFnZXIuZGlzY29ubmVjdCIsIkNoYW5uZWxNYW5hZ2VyLnJlY29ubmVjdCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxPQUFPLFdBQVcsc0JBQXNCLENBQUMsQ0FBQTtBQUNoRCxJQUFPLE9BQU8sV0FBVyxVQUFVLENBQUMsQ0FBQTtBQUVwQztJQVNFQTtRQUNFQyxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLEVBQUVBLENBQUNBO0lBQzdCQSxDQUFDQTtJQUVERCxnQ0FBT0EsR0FBUEEsVUFBUUEsRUFBRUE7UUFBVkUsaUJBb0JDQTtRQW5CQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakJBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1FBQ2hDQSxDQUFDQTtRQUVEQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1FBQy9CQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBO1lBQUNBLE1BQU1BLENBQUNBO1FBQ25DQSxJQUFJQSxDQUFDQSxpQkFBaUJBLEdBQUdBLElBQUlBLENBQUNBO1FBRTlCQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxFQUFF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