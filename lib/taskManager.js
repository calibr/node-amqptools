/// <reference path="../typings/tsd.d.ts" />
var TaskManager = require("./");
var EXCHANGE_PREFIX = "nimbus:jobs:";
var QUEUE_PREFIX = "nimbus:jobs:queue:";
var EXCHANGE_OPTIONS = { durable: true, autoDelete: false };
var JOB_QUEUE_OPTIONS = { durable: true, autoDelete: false };
var Promise = require("bluebird");
var uuid = require("node-uuid");
var _ = require("lodash");
var queues = {};
var Task = (function () {
    function Task(type, params) {
        this.uuid = uuid.v4();
        this.type = type;
        this.params = params;
    }
    Task.prototype.getChannel = function () {
        return this.taskManager.getChannel();
    };
    Task.prototype.start = function (done) {
        var _this = this;
        var currentChannel;
        var params = _.clone(this.params);
        params['uuid'] = this.uuid;
        var eventData = new Buffer(JSON.stringify(params));
        this.getChannel().then(function (channel) {
            currentChannel = channel;
            return _this.taskManager.assertExchange();
        }).then(function () {
            return _this.taskManager.getQueue(_this.type, true);
        }).then(function () {
            currentChannel.publish(_this.taskManager.exchangeName, _this.type, eventData);
            if (done)
                done();
        });
        return this;
    };
    return Task;
})();
var TaskManager = (function () {
    function TaskManager() {
        this.service = "unknown";
        this.exchangeName = "";
    }
    TaskManager.prototype.createTask = function (type, params) {
        var task = new Task(type, params);
        task.taskManager = this;
        return task;
    };
    TaskManager.prototype.getChannel = function () {
        return TaskManager.channelManager.getChannel();
    };
    Object.defineProperty(TaskManager.prototype, "channelManager", {
        set: function (value) {
            TaskManager.channelManager = value;
        },
        enumerable: true,
        configurable: true
    });
    TaskManager.prototype.getQueue = function (taskType, bindQueueToExchange) {
        var _this = this;
        if (queues[taskType])
            return queues[taskType];
        return this.getChannel().then(function () {
            var queueName = QUEUE_PREFIX + taskType;
            queues[taskType] = _this.assertQueue(queueName);
            if (bindQueueToExchange)
                _this.bindQueue(taskType);
            return queues[taskType];
        });
    };
    TaskManager.prototype.assertExchange = function () {
        var _this = this;
        return this.getChannel().then(function (channel) {
            var exchangeName = EXCHANGE_PREFIX + _this.service;
            if (_this.exchangeName == exchangeName)
                return Promise.resolve(channel);
            return new Promise(function (resolve, reject) {
                channel.assertExchange(exchangeName, 'direct', EXCHANGE_OPTIONS, function (err) {
                    _this.exchangeName = exchangeName;
                    if (err)
                        return reject(err);
                    resolve(channel);
                });
            });
        });
    };
    TaskManager.prototype.assertQueue = function (queueName) {
        return this.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertQueue(queueName, JOB_QUEUE_OPTIONS, function (err, ok) {
                    if (err)
                        return reject(err);
                    resolve(ok);
                });
            });
        });
    };
    TaskManager.prototype.bindQueue = function (taskType) {
        var _this = this;
        return this.getChannel().then(function (channel) {
            var queueName = QUEUE_PREFIX + taskType;
            channel.bindQueue(queueName, _this.exchangeName, taskType);
        });
    };
    TaskManager.prototype.purgeQueue = function (taskType, cb) {
        return this.getChannel().then(function (channel) {
            var queueName = QUEUE_PREFIX + taskType;
            return new Promise(function (resolve, reject) {
                channel.checkQueue(queueName, function (err, ok) {
                    if (err)
                        return resolve(null);
                    if (ok) {
                        return channel.purgeQueue(queueName, function (err, reply) {
                            if (err)
                                return reject(err);
                            resolve(reply);
                        });
                    }
                    resolve(null);
                });
            });
        }).nodeify(cb);
    };
    TaskManager.prototype.processTask = function (taskType, taskCallback) {
        var _this = this;
        var queueName = QUEUE_PREFIX + taskType, currentChannel;
        return this.getChannel().then(function (channel) {
            currentChannel = channel;
            return _this.getQueue(taskType);
        }).then(function () {
            currentChannel.prefetch(1);
            currentChannel.consume(queueName, function (msg) {
                var taskData = JSON.parse(msg.content.toString());
                taskCallback(taskData, function () {
                    currentChannel.ack(msg);
                });
            }, { noAck: false });
        });
    };
    return TaskManager;
})();
var taskManager = new TaskManager();
module.exports = taskManager;
//# sourceMappingURL=data:application/json;base64,