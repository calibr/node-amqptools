/// <reference path="../typings/tsd.d.ts" />
var EXCHANGE_PREFIX = "nimbus:jobs:";
var QUEUE_PREFIX = "nimbus:jobs:queue:";
var EXCHANGE_OPTIONS = { durable: true, autoDelete: false };
var JOB_QUEUE_OPTIONS = { durable: true, autoDelete: false };
var Promise = require("bluebird");
var uuid = require("node-uuid");
var _ = require("lodash");
var queues = {};
var Task = (function () {
    function Task(type, params) {
        this.uuid = uuid.v4();
        this.type = type;
        this.params = params;
    }
    Task.prototype.start = function (done) {
        var _this = this;
        var currentChannel;
        var params = _.clone(this.params);
        params['uuid'] = this.uuid;
        var eventData = new Buffer(JSON.stringify(params));
        this.taskManager.getChannel().then(function (channel) {
            currentChannel = channel;
            return taskManager.assertExchange(currentChannel);
        }).then(function () {
            return taskManager.getQueue(_this.type, true);
        }).then(function () {
            currentChannel.publish(_this.taskManager.exchangeName, _this.type, eventData);
            if (done)
                done();
        });
        return this;
    };
    return Task;
})();
var taskManager = {
    service: "unknown",
    exchangeName: "",
    channelPromise: null,
    _connect: function (cb) {
        throw new Error('Need to set tasks connect function');
    },
    getChannel: function () {
        if (!taskManager.channelPromise) {
            taskManager.channelPromise = new Promise(function (resolve, reject) {
                taskManager._connect(function (channel) {
                    resolve(channel);
                });
            });
        }
        return taskManager.channelPromise;
    },
    getQueue: function (taskType, bindQueueToExchange) {
        if (queues[taskType])
            return queues[taskType];
        return taskManager.getChannel().then(function () {
            var queueName = QUEUE_PREFIX + taskType;
            queues[taskType] = taskManager.assertQueue(queueName);
            if (bindQueueToExchange)
                taskManager.bindQueue(taskType);
            return queues[taskType];
        });
    },
    assertExchange: function (channel) {
        var exchangeName = EXCHANGE_PREFIX + taskManager.service;
        if (taskManager.exchangeName == exchangeName)
            return Promise.resolve(channel);
        return new Promise(function (resolve, reject) {
            channel.assertExchange(exchangeName, 'direct', EXCHANGE_OPTIONS, function (err) {
                taskManager.exchangeName = exchangeName;
                if (err)
                    return reject(err);
                resolve(channel);
            });
        });
    },
    assertQueue: function (queueName) {
        return taskManager.getChannel().then(function (channel) {
            return new Promise(function (resolve, reject) {
                channel.assertQueue(queueName, JOB_QUEUE_OPTIONS, function (err, ok) {
                    if (err)
                        return reject(err);
                    resolve(ok);
                });
            });
        });
    },
    bindQueue: function (taskType) {
        return taskManager.getChannel().then(function (channel) {
            var queueName = QUEUE_PREFIX + taskType;
            channel.bindQueue(queueName, taskManager.exchangeName, taskType);
        });
    },
    Task: Task,
    processTask: function (taskType, taskCallback) {
        var queueName = QUEUE_PREFIX + taskType, currentChannel;
        return taskManager.getChannel().then(function (channel) {
            currentChannel = channel;
            return taskManager.getQueue(taskType);
        }).then(function () {
            currentChannel.prefetch(1);
            currentChannel.consume(queueName, function (msg) {
                var taskData = JSON.parse(msg.content);
                taskCallback(taskData, function () {
                    currentChannel.ack(msg);
                });
            }, { noAck: false });
        });
    }
};
Task.prototype.taskManager = taskManager;
module.exports = taskManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFza3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGFza3MudHMiXSwibmFtZXMiOlsiVGFzayIsIlRhc2suY29uc3RydWN0b3IiLCJUYXNrLnN0YXJ0Il0sIm1hcHBpbmdzIjoiQUFBQSw0Q0FBNEM7QUFFNUMsSUFBTSxlQUFlLEdBQUcsY0FBYyxDQUFDO0FBQ3ZDLElBQU0sWUFBWSxHQUFHLG9CQUFvQixDQUFDO0FBQzFDLElBQU0sZ0JBQWdCLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUM5RCxJQUFNLGlCQUFpQixHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFFL0QsSUFBTyxPQUFPLFdBQVcsVUFBVSxDQUFDLENBQUE7QUFDcEMsSUFBTyxJQUFJLFdBQVcsV0FBVyxDQUFDLENBQUE7QUFDbEMsSUFBTyxDQUFDLFdBQVcsUUFBUSxDQUFDLENBQUE7QUFPNUIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBRWhCO0lBTUVBLGNBQWFBLElBQVlBLEVBQUVBLE1BQWtCQTtRQUMzQ0MsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7UUFDdEJBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1FBQ2pCQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFDQTtJQUN2QkEsQ0FBQ0E7SUFDREQsb0JBQUtBLEdBQUxBLFVBQU1BLElBQUtBO1FBQVhFLGlCQWlCQ0E7UUFoQkNBLElBQUlBLGNBQWNBLENBQUNBO1FBQ25CQSxJQUFJQSxNQUFNQSxHQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUNqQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsSUFBSUEs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