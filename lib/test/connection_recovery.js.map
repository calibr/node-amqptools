{"version":3,"file":"connection_recovery.js","sourceRoot":"","sources":["../../src/test/connection_recovery.ts"],"names":[],"mappings":"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","sourcesContent":["// this test should be run only using sudo!\n\nimport { amqpManager as amqpTools } from \"../index\"\nimport {EventListener} from \"../EventListener\"\nimport * as sinon from \"sinon\"\nimport * as Promise from \"Bluebird\";\nimport childProcess = require(\"child_process\");\nimport fs = require(\"fs\");\n\nvar spawn = childProcess.spawn;\n\nrequire(\"should\");\n\nvar restartRabbitPath = __dirname + \"/../../restart_rabbit.sh\";\n\nfunction restartRabbit(done) {\n  var restarter = spawn(restartRabbitPath);\n  restarter.stdout.pipe(process.stdout);\n  restarter.stderr.pipe(process.stdout);\n  restarter.on(\"close\", function() {\n    done();\n  });\n}\n\namqpTools.setConnectionURI(\"amqp://localhost\");\n\nif(fs.existsSync(restartRabbitPath)) {\n  describe(\"Connection recovery\", function() {\n    describe(\"recover events\", () => {\n      var events;\n      var messages = [];\n      function listener(message) {\n        messages.push(message);\n      }\n      before(function(done) {\n        this.timeout(20e3);\n        amqpTools.channelManager.randomReconnectionInterval = false;\n        amqpTools.reconnect(function() {\n          events = new amqpTools.events(\"some-app\");\n          events.on(\"event:recover\", listener);\n          // make sure that listener accepts messages\n          events.emit(\"event:recover\", \"test-event\");\n          setTimeout(() => {\n            messages.length.should.equal(1);\n            messages[0].should.equal(\"test-event\");\n            messages = [];\n            restartRabbit(() => {\n              setTimeout(done, 1000);\n            });\n          }, 500);\n        });\n      });\n\n      it(\"events should go after rebbit restart\", (done) => {\n        events.emit(\"event:recover\", \"after-restart\");\n        setTimeout(() => {\n          messages.length.should.equal(1);\n          messages[0].should.equal(\"after-restart\");\n          done();\n        }, 500);\n      });\n    });\n    describe(\"recover tasks\", () => {\n      var tasks;\n      var messages = [];\n      function processor(message, done) {\n        messages.push(message);\n        done();\n      }\n      before(function(done) {\n        this.timeout(20e3);\n        amqpTools.reconnect(function() {\n          tasks = amqpTools.tasks;\n          tasks.processTask(\"task:recovered_task\", processor);\n          // make sure that processor accepts messages\n          var task = tasks.createTask(\"task:recovered_task\", {\n            title: \"test-task\"\n          });\n          task.start();\n          setTimeout(() => {\n            messages.length.should.equal(1);\n            messages[0].title.should.equal(\"test-task\");\n            messages = [];\n            restartRabbit(() => {\n              setTimeout(done, 1000);\n            });\n          }, 500);\n        });\n      });\n\n      it(\"tasks should go after rebbit restart\", (done) => {\n        var task = tasks.createTask(\"task:recovered_task\", {\n          title: \"after-restart\"\n        });\n        task.start();\n        setTimeout(() => {\n          messages.length.should.equal(1);\n          messages[0].title.should.equal(\"after-restart\");\n          done();\n        }, 500);\n      });\n    });\n  });\n}"]}