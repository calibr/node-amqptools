{"version":3,"file":"AMQPManager.js","sourceRoot":"","sources":["../src/AMQPManager.ts"],"names":[],"mappings":";AACA,iDAAiE;AAKjE,qDAAiD;AACjD,+CAA4C;AAC5C,mCAAgC;AAChC,mDAAgD;AAGhD,6CAAyC;AAEzC;IAGE,IAAI,MAAM;QACR,MAAM,CAAC,+BAAY,CAAC;IACtB,CAAC;IAED,IAAI,GAAG;QACL,MAAM,CAAC,uBAAU,CAAC;IACpB,CAAC;IAED,IAAI,cAAc;QAChB,MAAM,CAAC,+BAAc,CAAC;IACxB,CAAC;IAED,IAAI,KAAK;QACP,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,WAAW,GAAG,IAAI,yBAAW,EAAE,CAAC;QACvC,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,WAAW,CAAC,OAAgC;QAC1C,MAAM,CAAC,IAAI,aAAK,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED,mBAAmB,CAAC,OAAwC;QAC1D,MAAM,CAAC,IAAI,6BAAa,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED,gBAAgB,CAAC,GAAG;QAClB,+BAAc,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACvC,CAAC;IAED,UAAU,CAAC,EAAE;QACX,+BAAc,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;IAChC,CAAC;IAED,SAAS,CAAC,EAAG;QACX,+BAAc,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;IAC/B,CAAC;CACF;AAzCD,kCAyCC","sourcesContent":["import amqpLib = require(\"amqplib/callback_api\")\nimport { AMQPEventEmitter as eventManager } from \"./EventEmitter\"\n\nimport taskManager = require(\"./TaskManager\")\nimport async = require(\"async\")\nimport Promise = require(\"bluebird\")\nimport { channelManager } from './ChannelManager'\nimport { TaskManager } from \"./TaskManager\";\nimport { Event } from \"./Event\";\nimport { EventListener } from \"./EventListener\";\nimport { EventListenerConstructorOptions } from \"./EventListener\";\nimport { EventConstructorOptions } from \"./Event\";\nimport { RPCManager } from \"./RPCManager\"\n\nexport class AMQPManager {\n  private taskManager: TaskManager;\n\n  get events() {\n    return eventManager;\n  }\n\n  get rpc() {\n    return RPCManager;\n  }\n\n  get channelManager() {\n    return channelManager;\n  }\n\n  get tasks():TaskManager {\n    if (!this.taskManager) {\n      this.taskManager = new TaskManager();\n    }\n    return this.taskManager;\n  }\n\n  createEvent(options: EventConstructorOptions) {\n    return new Event(options);\n  }\n\n  createEventListener(options: EventListenerConstructorOptions) {\n    return new EventListener(options);\n  }\n\n  setConnectionURI(uri) {\n    channelManager.setConnectionURI(uri);\n  }\n\n  disconnect(cb) {\n    channelManager.disconnect(cb);\n  }\n\n  reconnect(cb?) {\n    channelManager.reconnect(cb);\n  }\n}"]}